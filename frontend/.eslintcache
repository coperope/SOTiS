[{"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\index.js":"1","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\App.js":"3","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\ListTests\\ListTests.tsx":"4","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Login\\Login.js":"5","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\CreateTest.tsx":"6","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Header\\Header.js":"7","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Register\\Register.js":"8","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\TestView.tsx":"9","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx":"10","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx":"11","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\hooks\\useFetch.tsx":"12","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\utils\\authUtils.tsx":"13","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestAccordion\\TestAccordion.tsx":"14","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\utils\\apiUrls.tsx":"15","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx":"16","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\styles.ts":"17","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts":"18","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts":"19","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\Question\\Question.tsx":"20","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Graph\\Graph.tsx":"21","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts":"22","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestAccordion\\styles.tsx":"23","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx":"24","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\Question\\styles.ts":"25","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Graph\\graph-config.js":"26"},{"size":470,"mtime":1606165537134,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1606049929033,"results":"29","hashOfConfig":"28"},{"size":2405,"mtime":1607380812727,"results":"30","hashOfConfig":"28"},{"size":1689,"mtime":1606854276194,"results":"31","hashOfConfig":"28"},{"size":3915,"mtime":1607457717954,"results":"32","hashOfConfig":"28"},{"size":11497,"mtime":1607458977827,"results":"33","hashOfConfig":"28"},{"size":7888,"mtime":1607380812735,"results":"34","hashOfConfig":"28"},{"size":7495,"mtime":1606772205258,"results":"35","hashOfConfig":"28"},{"size":3675,"mtime":1606862329920,"results":"36","hashOfConfig":"28"},{"size":7105,"mtime":1607457717946,"results":"37","hashOfConfig":"28"},{"size":2760,"mtime":1607457717952,"results":"38","hashOfConfig":"28"},{"size":1827,"mtime":1606864106944,"results":"39","hashOfConfig":"28"},{"size":684,"mtime":1606854276206,"results":"40","hashOfConfig":"28"},{"size":1823,"mtime":1606863989070,"results":"41","hashOfConfig":"28"},{"size":1022,"mtime":1607458318725,"results":"42","hashOfConfig":"28"},{"size":4474,"mtime":1607457731681,"results":"43","hashOfConfig":"28"},{"size":755,"mtime":1606864025658,"results":"44","hashOfConfig":"28"},{"size":431,"mtime":1607380812729,"results":"45","hashOfConfig":"28"},{"size":836,"mtime":1607380812737,"results":"46","hashOfConfig":"28"},{"size":3506,"mtime":1606862329917,"results":"47","hashOfConfig":"28"},{"size":15967,"mtime":1607457717950,"results":"48","hashOfConfig":"28"},{"size":1145,"mtime":1607457731684,"results":"49","hashOfConfig":"28"},{"size":573,"mtime":1606759845325,"results":"50","hashOfConfig":"28"},{"size":1865,"mtime":1606918426560,"results":"51","hashOfConfig":"28"},{"size":922,"mtime":1606862329918,"results":"52","hashOfConfig":"28"},{"size":3602,"mtime":1607380812732,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vpedp5",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\index.js",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\App.js",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\ListTests\\ListTests.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Login\\Login.js",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\CreateTest.tsx",["110"],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Header\\Header.js",["111"],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Register\\Register.js",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\TestView.tsx",["112","113","114","115"],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx",["116","117","118"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport {\r\n  IEdge,\r\n  INode,\r\n} from 'react-digraph';\r\nimport { Accordion, AccordionSummary, AccordionDetails, AccordionActions, Typography, Button, Grid, InputLabel, FormControl, Input } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nimport { Graph, IGraphProps, IGraph } from '../Graph/Graph'\r\nimport { useStyles } from './styles'\r\nimport {\r\n  BASE_URL,\r\n  CREATE_KNOWLEDGE_SPACE,\r\n  GET_ONE_KNOWLEDGE_SPACE,\r\n} from '../../utils/apiUrls';\r\nimport { getToken } from '../../utils/authUtils';\r\nimport { getUser } from '../../utils/authUtils';\r\n\r\nconst submit = async (knowledgeSpace: KnowledgeSpace) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"post\",\r\n      body: JSON.stringify(knowledgeSpace),\r\n    }\r\n    const response = await fetch(BASE_URL + CREATE_KNOWLEDGE_SPACE(getUser().id), options);\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst get = async (id: string) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"get\",\r\n    }\r\n    const response = await fetch(BASE_URL + GET_ONE_KNOWLEDGE_SPACE(getUser().id, id), options);\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\ninterface ParamTypes {\r\n  id: string\r\n}\r\n\r\nconst initialNode: INode = {\r\n  id: Math.floor(Math.random() * 1000),\r\n  title: '',\r\n  x: 258,\r\n  y: 258\r\n}\r\n\r\ninterface KnowledgeSpace {\r\n  title: string,\r\n  problems: Array<any>,\r\n  edges: Array<any>\r\n}\r\n\r\nconst initialKnowledgeSpace: KnowledgeSpace = {\r\n  title: \"\",\r\n  problems: [],\r\n  edges: []\r\n}\r\n\r\nexport const CreateKnowledgeSpace = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { id } = useParams<ParamTypes>();\r\n  const [graph, setGraph] = useState<IGraph>({ nodes: [], edges: [] });\r\n  const [newNode, setNewNode] = useState<INode>(initialNode);\r\n  const [title, setTitle] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetch() {\r\n      const response = await get(id);\r\n      const knowledgeSpace = response.knowledgeSpace;\r\n      setGraph({\r\n        edges: knowledgeSpace.edges.map((e: any) => {\r\n          return {\r\n            ...e,\r\n            id: e.edgeId,\r\n            source: e.problemSourceId,\r\n            target: e.problemTargetId,\r\n          }\r\n        }),\r\n        nodes: knowledgeSpace.problems.map((p: any) => {\r\n          return {\r\n            ...p,\r\n            id: p.problemId,\r\n          }\r\n        }),\r\n      });\r\n      setTitle(knowledgeSpace.title);\r\n    }\r\n    if (id) {\r\n      fetch()\r\n    }\r\n  }, [id]);\r\n\r\n  const createNode = () => {\r\n    const node = { ...newNode };\r\n    const nodes = [...graph.nodes, node];\r\n    setNewNode({ ...initialNode, id: Math.floor(Math.random() * 1000) });\r\n    setGraph({\r\n      ...graph,\r\n      nodes: nodes,\r\n    }\r\n    );\r\n  }\r\n\r\n  const onChangeProblemTitle = (e: any) => {\r\n    setNewNode(prev => {\r\n      return {\r\n        ...prev,\r\n        title: e.target.value\r\n      }\r\n    });\r\n  }\r\n\r\n  const onChangeTitle = (e: any) => {\r\n    setTitle(e.target.value);\r\n  }\r\n\r\n  const createKnowledgeSpace = async (graph: IGraph) => {\r\n    let toSubmit: KnowledgeSpace = { ...initialKnowledgeSpace, title: title }\r\n    toSubmit.edges = graph.edges.map(e => {\r\n      return {\r\n        edgeId: Math.floor(Math.random() * 1000),\r\n        problemSourceId: e.source,\r\n        problemTargetId: e.target\r\n      }\r\n    });\r\n    toSubmit.problems = graph.nodes.map(n => {\r\n      return {\r\n        ...n,\r\n        problemId: n.id,\r\n      }\r\n    });\r\n\r\n    console.log(\"knowledgeSpace\", toSubmit);\r\n    const result = await submit(toSubmit);\r\n    if (result) {\r\n      history.push(`/knowledge-space/${result.id}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1} justify={\"center\"} alignItems={\"center\"} style={{ paddingBottom: \"2em\" }}>\r\n        <Grid item xs={6} style={{ textAlign: \"center\", paddingBottom: \"2em\" }}>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            Knowledge Space\r\n          </Typography>\r\n          <FormControl fullWidth>\r\n            <InputLabel htmlFor=\"Text\"> Title </InputLabel>\r\n            <Input name=\"Text\" value={title} onChange={(e) => onChangeTitle(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} disabled={id != undefined} />\r\n          </FormControl>\r\n          <Grid item xs={12} style={{ textAlign: \"center\", paddingTop: \"2em\" }}>\r\n            {!id &&\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography>Add new problem</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                      <FormControl fullWidth>\r\n                        <InputLabel htmlFor=\"Text\"> Title </InputLabel>\r\n                        <Input name=\"Text\" value={newNode.title} onChange={(e) => onChangeProblemTitle(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} />\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n                <AccordionActions>\r\n                  <Button onClick={() => createNode()} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                    Add\r\n              </Button>\r\n                </AccordionActions>\r\n              </Accordion>\r\n            }\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{ textAlign: \"center\" }}>\r\n          <Graph graph={graph} createKnowledgeSpace={createKnowledgeSpace} id={id}></Graph>\r\n        </Grid>\r\n\r\n        <Grid item xs={7} style={{ textAlign: \"center\", marginTop: \"2.5em\" }}>\r\n          <Typography variant=\"subtitle1\" >\r\n            To add a problem, click on \"Add new problem\", enter title and press \"ADD\".\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" >\r\n            To add relation, hold shift and click/drag to between problems.\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" >\r\n            To delete a relation or a problem, click on it and press delete.\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" >\r\n            Click and drag problems to change their position.\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n",["119","120"],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\hooks\\useFetch.tsx",["121"],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\utils\\authUtils.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestAccordion\\TestAccordion.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\utils\\apiUrls.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx",["122"],"import React, { useState, useEffect } from 'react';\r\nimport { Question, Answer } from '../CreateTest'\r\nimport { useStyles } from './styles'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Grid, Checkbox, FormControl, InputLabel, Input, Button, FormControlLabel, Box, IconButton } from '@material-ui/core';\r\nimport NewAnswer from './NewAnswer/NewAnswer';\r\n\r\n\r\ninterface QuestionProps extends Question {\r\n  index: number,\r\n  setQuestionText: any,\r\n  setQuestionIsMultiple: any,\r\n  remove: any\r\n}\r\n\r\nfunction NewQuestion(question: QuestionProps) {\r\n\r\n  const classes = useStyles();\r\n  const [answers, setAnswers] = useState<Array<Answer>>(Array<Answer>());\r\n  const blankAnswer: Answer = {\r\n    Text: '',\r\n    Correct: false\r\n  }\r\n  const onChange = (e: any) => {\r\n    question.setQuestionText(e.target.value, question.index);\r\n  }\r\n  const setIsMultipleChoice = (e: any) => {\r\n    question.setQuestionIsMultiple(e.target.checked, question.index);\r\n  }\r\n\r\n  const removeQuestion = () => {\r\n    console.log(question.index)\r\n    question.remove(question.index);\r\n  }\r\n\r\n  useEffect(() => {\r\n    question?.Answers?.splice(0, question?.Answers?.length);\r\n    question?.Answers?.push(...answers);\r\n\r\n  }, [answers]);\r\n\r\n  const setAnswerText = (text: string, index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      {\r\n        ...answers[index],\r\n        Text: text,\r\n      },\r\n      ...answers.slice(index + 1)\r\n    ]);\r\n  }\r\n  const setAnswerIsCorrect = (isCorrect: boolean, index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      {\r\n        ...answers[index],\r\n        Correct: isCorrect,\r\n      },\r\n      ...answers.slice(index + 1)\r\n    ]);\r\n  }\r\n  const removeAnswer = (index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      ...answers.slice(index + 1)]);\r\n  }\r\n\r\n  return <div className={[classes.root, classes.questionPanel].join(' ')}>\r\n    <Box boxShadow={1}>\r\n      <Box boxShadow={1} className={classes.titlePanel} style={{ minWidth: \"38.6em\", maxWidth: \"60em\", margin: \"0.2em 0 0.5em\" }}>\r\n        <Grid container spacing={3} alignItems='center'\r\n          justify='center' >\r\n          <Grid item xs={8} style={{ padding: \"0.5em\" }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"Text\"> Question {question.index + 1} text</InputLabel>\r\n              <Input name=\"Text\" value={question.Text} onChange={(e) => onChange(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={2} style={{ padding: \"0.5em\" }}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={question.isMultipleChoice}\r\n                  onChange={(e) => setIsMultipleChoice(e)}\r\n                  name=\"Correct\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Multiple choice\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <IconButton className={classes.button} onClick={() => removeQuestion()}>\r\n              <DeleteIcon />\r\n            </IconButton >\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Grid container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"stretch\"\r\n        style={{ paddingTop: \"1.5em\" }} >\r\n        <Grid item xs={12}>\r\n          {answers.map((answer: Answer, index: number) => (\r\n            <Grid item xs={11} key={index} style={{ paddingTop: \"1em\", paddingBottom: \"1em\", marginLeft: \"0.5em\", marginRight: \"0.5em\" }}>\r\n              <NewAnswer\r\n                Text={answer.Text}\r\n                Correct={answer.Correct}\r\n                index={index}\r\n                setAnswerText={setAnswerText}\r\n                setAnswerIsCorrect={setAnswerIsCorrect}\r\n                remove={removeAnswer}\r\n              ></NewAnswer>\r\n            </Grid>\r\n          ))}\r\n          <Grid item xs={12}>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={() => setAnswers([...answers, { ...blankAnswer }])} style={{ marginTop: \"0.8em\", marginBottom: \"0.4em\" }}>\r\n              Add an answer\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  </div >;\r\n}\r\n\r\nexport default NewQuestion;\r\n","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\styles.ts",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts",["123","124"],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\Question\\Question.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Graph\\Graph.tsx",["125","126","127","128","129","130","131","132","133","134","135"],"import * as React from 'react';\r\nimport { Tooltip, Button } from '@material-ui/core';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {\r\n  GraphView,\r\n  IEdge,\r\n  INode,\r\n  LayoutEngineType,\r\n} from 'react-digraph';\r\nimport GraphConfig, {\r\n  edgeTypes,\r\n  EMPTY_EDGE_TYPE,\r\n  EMPTY_TYPE,\r\n  NODE_KEY,\r\n  nodeTypes,\r\n  COMPLEX_CIRCLE_TYPE,\r\n  POLY_TYPE,\r\n  SPECIAL_CHILD_SUBTYPE,\r\n  SPECIAL_EDGE_TYPE,\r\n  SPECIAL_TYPE,\r\n  SKINNY_TYPE,\r\n} from './graph-config';\r\n\r\nexport type IGraph = {\r\n  nodes: INode[],\r\n  edges: IEdge[],\r\n};\r\n\r\n// NOTE: Edges must have 'source' & 'target' attributes\r\n// In a more realistic use case, the graph would probably originate\r\n// elsewhere in the App or be generated from some other state upstream of this component.\r\nconst sample: IGraph = {\r\n  edges: [\r\n    // {\r\n    //   handleText: '5',\r\n    //   handleTooltipText: '5',\r\n    //   source: 'start1',\r\n    //   target: 'a1',\r\n    //   type: SPECIAL_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '5',\r\n    //   handleTooltipText: 'This edge connects Node A and Node B',\r\n    //   source: 'a1',\r\n    //   target: 'a2',\r\n    //   type: SPECIAL_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a2',\r\n    //   target: 'a4',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a3',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a3',\r\n    //   target: 'a4',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a5',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a4',\r\n    //   target: 'a1',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a6',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '24',\r\n    //   source: 'a1',\r\n    //   target: 'a7',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n  ],\r\n  nodes: [\r\n    // {\r\n    //   id: 'start1',\r\n    //   title: 'Start (0)',\r\n    //   type: SPECIAL_TYPE,\r\n    // },\r\n    // {\r\n    //   id: 'a1',\r\n    //   title: 'Node A (1)',\r\n    //   type: SPECIAL_TYPE,\r\n    //   x: 258.3976135253906,\r\n    //   y: 331.9783248901367,\r\n    // },\r\n    // {\r\n    //   id: 'a2',\r\n    //   subtype: SPECIAL_CHILD_SUBTYPE,\r\n    //   title: 'Node B (2)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 593.9393920898438,\r\n    //   y: 260.6060791015625,\r\n    // },\r\n    // {\r\n    //   id: 'a3',\r\n    //   title: 'Node C (3)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 237.5757598876953,\r\n    //   y: 61.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a4',\r\n    //   title: 'Node D (4)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 600.5757598876953,\r\n    //   y: 600.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a5',\r\n    //   title: 'Node E (5)',\r\n    //   type: undefined,\r\n    //   x: 50.5757598876953,\r\n    //   y: 500.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a6',\r\n    //   title: 'Node E (6)',\r\n    //   type: SKINNY_TYPE,\r\n    //   x: 300,\r\n    //   y: 600,\r\n    // },\r\n    // {\r\n    //   id: 'a7',\r\n    //   title: 'Node F (7)',\r\n    //   type: POLY_TYPE,\r\n    //   x: 0,\r\n    //   y: 300,\r\n    // },\r\n    // {\r\n    //   id: 'a8',\r\n    //   title: 'Node G (8)',\r\n    //   type: COMPLEX_CIRCLE_TYPE,\r\n    //   x: -200,\r\n    //   y: 400,\r\n    // },\r\n  ],\r\n};\r\n\r\n// function generateSample(totalNodes: any) {\r\n//   const generatedSample: IGraph = {\r\n//     edges: [],\r\n//     nodes: [],\r\n//   };\r\n//   let y = 0;\r\n//   let x = 0;\r\n\r\n//   const numNodes = totalNodes ? totalNodes : 0;\r\n\r\n//   // generate large array of nodes\r\n//   // These loops are fast enough. 1000 nodes = .45ms + .34ms\r\n//   // 2000 nodes = .86ms + .68ms\r\n//   // implying a linear relationship with number of nodes.\r\n//   for (let i = 1; i <= numNodes; i++) {\r\n//     if (i % 20 === 0) {\r\n//       y++;\r\n//       x = 0;\r\n//     } else {\r\n//       x++;\r\n//     }\r\n\r\n//     generatedSample.nodes.push({\r\n//       id: `a${i}`,\r\n//       title: `Node ${i}`,\r\n//       type: nodeTypes[Math.floor(nodeTypes.length * Math.random())],\r\n//       x: 0 + 200 * x,\r\n//       y: 0 + 200 * y,\r\n//     });\r\n//   }\r\n//   // link each node to another node\r\n//   for (let i = 1; i < numNodes; i++) {\r\n//     generatedSample.edges.push({\r\n//       source: `a${i}`,\r\n//       target: `a${i + 1}`,\r\n//       type: edgeTypes[Math.floor(edgeTypes.length * Math.random())],\r\n//     });\r\n//   }\r\n\r\n//   return generatedSample;\r\n// }\r\n\r\n\r\nexport type IGraphProps = {\r\n  graph: IGraph,\r\n  createKnowledgeSpace: (graph: IGraph) => void,\r\n  id: string,\r\n};\r\n\r\nexport type IGraphState = {\r\n  graph: any,\r\n  selected: any,\r\n  totalNodes: number,\r\n  copiedNode: any,\r\n  layoutEngineType?: LayoutEngineType,\r\n};\r\n\r\n\r\nexport class Graph extends React.Component<IGraphProps, IGraphState> {\r\n  GraphView: any;\r\n\r\n  constructor(props: IGraphProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      copiedNode: null,\r\n      graph: props.graph,\r\n      layoutEngineType: 'None',\r\n      selected: null,\r\n      totalNodes: props.graph.nodes.length,\r\n    };\r\n\r\n    this.GraphView = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: IGraphProps) {\r\n    if (prevProps !== this.props) {\r\n      this.setState({\r\n        graph: this.props.graph,\r\n        totalNodes: this.props.graph.nodes.length\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // Helper to find the index of a given node\r\n  getNodeIndex(searchNode: INode | any) {\r\n    return this.state.graph.nodes.findIndex((node: any) => {\r\n      return node[NODE_KEY] === searchNode[NODE_KEY];\r\n    });\r\n  }\r\n\r\n  // Helper to find the index of a given edge\r\n  getEdgeIndex(searchEdge: IEdge) {\r\n    return this.state.graph.edges.findIndex((edge: any) => {\r\n      return (\r\n        edge.source === searchEdge.source && edge.target === searchEdge.target\r\n      );\r\n    });\r\n  }\r\n\r\n  // Given a nodeKey, return the corresponding node\r\n  getViewNode(nodeKey: string) {\r\n    const searchNode = {\r\n      id: ''\r\n    };\r\n\r\n    searchNode[NODE_KEY] = nodeKey;\r\n    const i = this.getNodeIndex(searchNode);\r\n\r\n    return this.state.graph.nodes[i];\r\n  }\r\n\r\n  makeItLarge = () => {\r\n    const graph = this.state.graph;\r\n    //const generatedSample = generateSample(this.state.totalNodes);\r\n\r\n    // graph.nodes = generatedSample.nodes;\r\n    // graph.edges = generatedSample.edges;\r\n    this.setState(this.state);\r\n  };\r\n\r\n  addStartNode = () => {\r\n    const graph = this.state.graph;\r\n\r\n    // using a new array like this creates a new memory reference\r\n    // this will force a re-render\r\n    graph.nodes = [\r\n      {\r\n        id: Date.now(),\r\n        title: 'Node A',\r\n        type: SPECIAL_TYPE,\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      ...this.state.graph.nodes,\r\n    ];\r\n    this.setState({\r\n      graph,\r\n    });\r\n  };\r\n  deleteStartNode = () => {\r\n    const graph = this.state.graph;\r\n\r\n    graph.nodes.splice(0, 1);\r\n    // using a new array like this creates a new memory reference\r\n    // this will force a re-render\r\n    graph.nodes = [...this.state.graph.nodes];\r\n    this.setState({\r\n      graph,\r\n    });\r\n  };\r\n\r\n  handleChange = (event: any) => {\r\n    this.setState(\r\n      {\r\n        totalNodes: parseInt(event.target.value || '0', 10),\r\n      },\r\n      this.makeItLarge\r\n    );\r\n  };\r\n\r\n  /*\r\n   * Handlers/Interaction\r\n   */\r\n\r\n  // Called by 'drag' handler, etc..\r\n  // to sync updates from D3 with the graph\r\n  onUpdateNode = (viewNode: INode) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getNodeIndex(viewNode);\r\n\r\n    graph.nodes[i] = viewNode;\r\n    this.setState({ graph });\r\n  };\r\n\r\n  // Node 'mouseUp' handler\r\n  onSelectNode = (viewNode: INode | null) => {\r\n    // Deselect events will send Null viewNode\r\n    this.setState({ selected: viewNode });\r\n  };\r\n\r\n  // Edge 'mouseUp' handler\r\n  onSelectEdge = (viewEdge: IEdge) => {\r\n    this.setState({ selected: viewEdge });\r\n  };\r\n\r\n  // Updates the graph with a new node\r\n  onCreateNode = (x: number, y: number) => {\r\n    const graph = this.state.graph;\r\n\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine node type\r\n    // There is also support for subtypes. (see 'sample' above)\r\n    // The subtype geometry will underlay the 'type' geometry for a node\r\n    const type = EMPTY_TYPE;\r\n\r\n    const viewNode = {\r\n      id: Date.now(),\r\n      title: '',\r\n      type,\r\n      x,\r\n      y,\r\n    };\r\n\r\n    graph.nodes = [...graph.nodes, viewNode];\r\n    this.setState({ graph });\r\n  };\r\n\r\n  // Deletes a node from the graph\r\n  onDeleteNode = (viewNode: INode, nodeId: string, nodeArr: INode[]) => {\r\n    const graph = this.state.graph;\r\n    // Delete any connected edges\r\n    const newEdges = graph.edges.filter((edge: any, i: any) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n\r\n    graph.nodes = nodeArr;\r\n    graph.edges = newEdges;\r\n\r\n    this.setState({ graph, selected: null });\r\n  };\r\n\r\n  // Creates a new node between two edges\r\n  onCreateEdge = (sourceViewNode: INode, targetViewNode: INode) => {\r\n    const graph = this.state.graph;\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine edge type\r\n    const type =\r\n      sourceViewNode.type === SPECIAL_TYPE\r\n        ? SPECIAL_EDGE_TYPE\r\n        : EMPTY_EDGE_TYPE;\r\n\r\n    const viewEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      type,\r\n    };\r\n\r\n    // Only add the edge when the source node is not the same as the target\r\n    if (viewEdge.source !== viewEdge.target) {\r\n      graph.edges = [...graph.edges, viewEdge];\r\n      this.setState({\r\n        graph,\r\n        selected: viewEdge,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when an edge is reattached to a different target.\r\n  onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    graph.edges[i] = edge;\r\n    // reassign the array reference if you want the graph to re-render a swapped edge\r\n    graph.edges = [...graph.edges];\r\n\r\n    this.setState({\r\n      graph,\r\n      selected: edge,\r\n    });\r\n  };\r\n\r\n  // Called when an edge is deleted\r\n  onDeleteEdge = (viewEdge: IEdge, edges: IEdge[]) => {\r\n    const graph = this.state.graph;\r\n\r\n    graph.edges = edges;\r\n    this.setState({\r\n      graph,\r\n      selected: null,\r\n    });\r\n  };\r\n\r\n  onUndo = () => {\r\n    // Not implemented\r\n    console.warn('Undo is not currently implemented in the example.');\r\n    // Normally any add, remove, or update would record the action in an array.\r\n    // In order to undo it one would simply call the inverse of the action performed. For instance, if someone\r\n    // called onDeleteEdge with (viewEdge, i, edges) then an undelete would be a splicing the original viewEdge\r\n    // into the edges array at position i.\r\n  };\r\n\r\n  onCopySelected = () => {\r\n    if (this.state.selected.source) {\r\n      console.warn('Cannot copy selected edges, try selecting a node instead.');\r\n\r\n      return;\r\n    }\r\n\r\n    const x = this.state.selected.x + 10;\r\n    const y = this.state.selected.y + 10;\r\n\r\n    this.setState({\r\n      copiedNode: { ...this.state.selected, x, y },\r\n    });\r\n  };\r\n\r\n  // Pastes the selected node to mouse position\r\n  onPasteSelected = (node: INode, mousePosition?: { x: number; y: number; }) => {\r\n    const graph = this.state.graph;\r\n\r\n    const newNode = {\r\n      ...node,\r\n      id: Date.now(),\r\n      x: mousePosition ? mousePosition.x : node.x,\r\n      y: mousePosition ? mousePosition.y : node.y,\r\n    };\r\n\r\n    graph.nodes = [...graph.nodes, newNode];\r\n    this.forceUpdate();\r\n  };\r\n\r\n  handleChangeLayoutEngineType = (event: any) => {\r\n    this.setState({\r\n      layoutEngineType: (event.target.value as LayoutEngineType | 'None'),\r\n    });\r\n  };\r\n\r\n  onSelectPanNode = (event: any) => {\r\n    if (this.GraphView) {\r\n      this.GraphView.panToNode(event.target.value, true);\r\n    }\r\n  };\r\n\r\n  createKnowledgeSpace = () => {\r\n    this.props.createKnowledgeSpace(this.state.graph);\r\n  }\r\n  /*\r\n   * Render\r\n   */\r\n\r\n  render() {\r\n    const { nodes, edges } = this.state.graph;\r\n    const selected = this.state.selected;\r\n    const { NodeTypes, NodeSubtypes, EdgeTypes } = GraphConfig;\r\n    return (\r\n      <><div style={{ height: '700px' }}>\r\n        {!this.props.id &&\r\n          <Button onClick={() => this.createKnowledgeSpace()} variant=\"contained\" color=\"primary\" style={{\r\n            backgroundColor: \"#CAD6DF\",\r\n            color: \"#000\",\r\n            marginBottom: \"1em\",\r\n          }}>\r\n            Create Knowledge Space\r\n          </Button>\r\n        }\r\n        {/* <div className=\"graph-header\">\r\n          <button onClick={this.addStartNode}>Add Node</button>\r\n          <button onClick={this.deleteStartNode}>Delete Node</button>\r\n          <input\r\n            className=\"total-nodes\"\r\n            type=\"number\"\r\n            onBlur={this.handleChange}\r\n            placeholder={this.state.totalNodes.toString()}\r\n          />\r\n          <div className=\"layout-engine\">\r\n            <span>Layout Engine:</span>\r\n            <select\r\n              name=\"layout-engine-type\"\r\n              onChange={this.handleChangeLayoutEngineType}\r\n            >\r\n              <option value={undefined}>None</option>\r\n              <option value={'SnapToGrid'}>Snap to Grid</option>\r\n              <option value={'VerticalTree'}>Vertical Tree</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"pan-list\">\r\n            <span>Pan To:</span>\r\n            <select onChange={this.onSelectPanNode}>\r\n              {nodes.map((node: any) => (\r\n                <option key={node[NODE_KEY]} value={node[NODE_KEY]}>\r\n                  {node.title}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div> */}\r\n        <div id=\"graph\" style={{ height: 'calc(100% - 10px)' }}>\r\n          <GraphView\r\n            ref={el => (this.GraphView = el)}\r\n            nodeKey={NODE_KEY}\r\n            nodes={nodes}\r\n            edges={edges}\r\n            selected={selected}\r\n            nodeTypes={NodeTypes}\r\n            nodeSubtypes={NodeSubtypes}\r\n            edgeTypes={EdgeTypes}\r\n            onSelectNode={this.onSelectNode}\r\n            onCreateNode={this.onCreateNode}\r\n            onUpdateNode={this.onUpdateNode}\r\n            onDeleteNode={this.onDeleteNode}\r\n            onSelectEdge={this.onSelectEdge}\r\n            onCreateEdge={this.onCreateEdge}\r\n            onSwapEdge={this.onSwapEdge}\r\n            onDeleteEdge={this.onDeleteEdge}\r\n            onUndo={this.onUndo}\r\n            onCopySelected={this.onCopySelected}\r\n            onPasteSelected={this.onPasteSelected}\r\n            layoutEngineType={this.state.layoutEngineType}\r\n            renderNodeText={data => {\r\n              return (\r\n                <foreignObject x='-100' y='-40' width='200' height='60'>\r\n                  <Tooltip title={<h4 style={{}}>{data.title}</h4>} placement='bottom' PopperProps={{\r\n                    popperOptions: {\r\n                      modifiers: {\r\n                        offset: {\r\n                          enabled: true,\r\n                          offset: '-40px, -40px',\r\n                        },\r\n                      },\r\n                    },\r\n                  }} >\r\n                    <div className='node'>\r\n                      <p className='job-title'>{data.title}</p>\r\n                    </div>\r\n                  </Tooltip>\r\n                </foreignObject>\r\n              )\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestAccordion\\styles.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\TestView\\Question\\styles.ts",[],"C:\\Users\\Petar\\Desktop\\Faks_razno\\MASTER\\SOTiS\\SOTiS\\Frontend\\src\\components\\Graph\\graph-config.js",["136"],{"ruleId":"137","severity":1,"message":"138","line":162,"column":6,"nodeType":"139","endLine":162,"endColumn":17,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":72,"column":16,"nodeType":"143","messageId":"144","endLine":72,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":4,"column":8,"nodeType":"143","messageId":"144","endLine":4,"endColumn":22},{"ruleId":"145","severity":1,"message":"147","line":10,"column":3,"nodeType":"143","messageId":"144","endLine":10,"endColumn":14},{"ruleId":"145","severity":1,"message":"148","line":58,"column":11,"nodeType":"143","messageId":"144","endLine":58,"endColumn":17},{"ruleId":"145","severity":1,"message":"149","line":68,"column":31,"nodeType":"143","messageId":"144","endLine":68,"endColumn":39},{"ruleId":"145","severity":1,"message":"150","line":4,"column":3,"nodeType":"143","messageId":"144","endLine":4,"endColumn":8},{"ruleId":"145","severity":1,"message":"151","line":10,"column":17,"nodeType":"143","messageId":"144","endLine":10,"endColumn":28},{"ruleId":"145","severity":1,"message":"152","line":38,"column":11,"nodeType":"143","messageId":"144","endLine":38,"endColumn":13},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"137","severity":1,"message":"157","line":76,"column":6,"nodeType":"139","endLine":76,"endColumn":11,"suggestions":"158"},{"ruleId":"137","severity":1,"message":"159","line":40,"column":6,"nodeType":"139","endLine":40,"endColumn":15,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"161","line":1,"column":10,"nodeType":"143","messageId":"144","endLine":1,"endColumn":15},{"ruleId":"145","severity":1,"message":"162","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":29},{"ruleId":"145","severity":1,"message":"161","line":3,"column":10,"nodeType":"143","messageId":"144","endLine":3,"endColumn":15},{"ruleId":"145","severity":1,"message":"162","line":3,"column":17,"nodeType":"143","messageId":"144","endLine":3,"endColumn":29},{"ruleId":"145","severity":1,"message":"163","line":3,"column":31,"nodeType":"143","messageId":"144","endLine":3,"endColumn":41},{"ruleId":"145","severity":1,"message":"164","line":12,"column":3,"nodeType":"143","messageId":"144","endLine":12,"endColumn":12},{"ruleId":"145","severity":1,"message":"165","line":16,"column":3,"nodeType":"143","messageId":"144","endLine":16,"endColumn":12},{"ruleId":"145","severity":1,"message":"166","line":17,"column":3,"nodeType":"143","messageId":"144","endLine":17,"endColumn":22},{"ruleId":"145","severity":1,"message":"167","line":18,"column":3,"nodeType":"143","messageId":"144","endLine":18,"endColumn":12},{"ruleId":"145","severity":1,"message":"168","line":19,"column":3,"nodeType":"143","messageId":"144","endLine":19,"endColumn":24},{"ruleId":"145","severity":1,"message":"169","line":22,"column":3,"nodeType":"143","messageId":"144","endLine":22,"endColumn":14},{"ruleId":"145","severity":1,"message":"170","line":33,"column":7,"nodeType":"143","messageId":"144","endLine":33,"endColumn":21},{"ruleId":"145","severity":1,"message":"171","line":271,"column":11,"nodeType":"143","messageId":"144","endLine":271,"endColumn":16},{"ruleId":"172","severity":1,"message":"173","line":92,"column":1,"nodeType":"174","endLine":139,"endColumn":3},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'test'. Either include it or remove the dependency array. You can also do a functional update 'setTest(t => ...)' if you only need 'test' in the 'setTest' call.","ArrayExpression",["175"],"no-unused-vars","'setAuth' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'ExpandMoreIcon' is defined but never used.","'SUBMIT_TEST' is defined but never used.","'result' is assigned a value but never used.","'hasError' is assigned a value but never used.","'IEdge' is defined but never used.","'IGraphProps' is defined but never used.","'id' is assigned a value but never used.","no-native-reassign",["176"],"no-negated-in-lhs",["177"],"React Hook useEffect has missing dependencies: 'body' and 'method'. Either include them or remove the dependency array.",["178"],"React Hook useEffect has a missing dependency: 'question?.Answers'. Either include it or remove the dependency array.",["179"],"'Theme' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'edgeTypes' is defined but never used.","'nodeTypes' is defined but never used.","'COMPLEX_CIRCLE_TYPE' is defined but never used.","'POLY_TYPE' is defined but never used.","'SPECIAL_CHILD_SUBTYPE' is defined but never used.","'SKINNY_TYPE' is defined but never used.","'sample' is assigned a value but never used.","'graph' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"180","fix":"181"},"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [questions, test]",{"range":"186","text":"187"},"Update the dependencies array to be: [body, method, url]",{"range":"188","text":"189"},"Update the dependencies array to be: [answers, question?.Answers]",{"range":"190","text":"191"},[4433,4444],"[questions, test]",[1688,1693],"[body, method, url]",[1173,1182],"[answers, question?.Answers]"]