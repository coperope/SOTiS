[{"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\index.js":"1","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\reportWebVitals.js":"2","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\App.js":"3","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Login\\Login.js":"4","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Register\\Register.js":"5","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListTests\\ListTests.tsx":"6","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Header\\Header.js":"7","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\CreateTest.tsx":"8","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\TestView.tsx":"9","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx":"10","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx":"11","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\apiUrls.tsx":"12","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\authUtils.tsx":"13","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\hooks\\useFetch.tsx":"14","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\TestAccordion.tsx":"15","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx":"16","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts":"17","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\styles.ts":"18","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts":"19","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\Question.tsx":"20","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\Graph.tsx":"21","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\styles.tsx":"22","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts":"23","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx":"24","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\graph-config.js":"25","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\styles.ts":"26"},{"size":470,"mtime":1606782387856,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1606056955350,"results":"29","hashOfConfig":"28"},{"size":2405,"mtime":1607378417701,"results":"30","hashOfConfig":"28"},{"size":3915,"mtime":1607455613731,"results":"31","hashOfConfig":"28"},{"size":7495,"mtime":1606780575010,"results":"32","hashOfConfig":"28"},{"size":1689,"mtime":1606780575250,"results":"33","hashOfConfig":"28"},{"size":7888,"mtime":1607380258418,"results":"34","hashOfConfig":"28"},{"size":11989,"mtime":1607524474522,"results":"35","hashOfConfig":"28"},{"size":3675,"mtime":1607377996738,"results":"36","hashOfConfig":"28"},{"size":9142,"mtime":1607888178261,"results":"37","hashOfConfig":"28"},{"size":2760,"mtime":1607455619000,"results":"38","hashOfConfig":"28"},{"size":1176,"mtime":1607887630076,"results":"39","hashOfConfig":"28"},{"size":684,"mtime":1606782823492,"results":"40","hashOfConfig":"28"},{"size":1827,"mtime":1606923185700,"results":"41","hashOfConfig":"28"},{"size":1823,"mtime":1606923185670,"results":"42","hashOfConfig":"28"},{"size":4559,"mtime":1607524474537,"results":"43","hashOfConfig":"28"},{"size":431,"mtime":1607366731120,"results":"44","hashOfConfig":"28"},{"size":755,"mtime":1606923185681,"results":"45","hashOfConfig":"28"},{"size":836,"mtime":1607379095720,"results":"46","hashOfConfig":"28"},{"size":3506,"mtime":1606860381482,"results":"47","hashOfConfig":"28"},{"size":16974,"mtime":1607873701537,"results":"48","hashOfConfig":"28"},{"size":573,"mtime":1606778924090,"results":"49","hashOfConfig":"28"},{"size":1145,"mtime":1607459140379,"results":"50","hashOfConfig":"28"},{"size":1924,"mtime":1607269241689,"results":"51","hashOfConfig":"28"},{"size":3602,"mtime":1607372652008,"results":"52","hashOfConfig":"28"},{"size":922,"mtime":1606858805242,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j9ej0m",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\index.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\reportWebVitals.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\App.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Login\\Login.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Register\\Register.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListTests\\ListTests.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Header\\Header.js",["110"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\CreateTest.tsx",["111","112"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\TestView.tsx",["113","114","115","116"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx",["117","118","119","120"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\apiUrls.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\authUtils.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\hooks\\useFetch.tsx",["121"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\TestAccordion.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx",["122"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts",["123","124"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\Question.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\Graph.tsx",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import * as React from 'react';\r\nimport { Tooltip, Button } from '@material-ui/core';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {\r\n  GraphView,\r\n  IEdge,\r\n  INode,\r\n  LayoutEngineType,\r\n} from 'react-digraph';\r\nimport GraphConfig, {\r\n  edgeTypes,\r\n  EMPTY_EDGE_TYPE,\r\n  EMPTY_TYPE,\r\n  NODE_KEY,\r\n  nodeTypes,\r\n  COMPLEX_CIRCLE_TYPE,\r\n  POLY_TYPE,\r\n  SPECIAL_CHILD_SUBTYPE,\r\n  SPECIAL_EDGE_TYPE,\r\n  SPECIAL_TYPE,\r\n  SKINNY_TYPE,\r\n} from './graph-config';\r\n\r\nexport type IGraph = {\r\n  nodes: INode[],\r\n  edges: IEdge[],\r\n};\r\n\r\n// NOTE: Edges must have 'source' & 'target' attributes\r\n// In a more realistic use case, the graph would probably originate\r\n// elsewhere in the App or be generated from some other state upstream of this component.\r\nconst sample: IGraph = {\r\n  edges: [\r\n    // {\r\n    //   handleText: '5',\r\n    //   handleTooltipText: '5',\r\n    //   source: 'start1',\r\n    //   target: 'a1',\r\n    //   type: SPECIAL_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '5',\r\n    //   handleTooltipText: 'This edge connects Node A and Node B',\r\n    //   source: 'a1',\r\n    //   target: 'a2',\r\n    //   type: SPECIAL_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a2',\r\n    //   target: 'a4',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a3',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a3',\r\n    //   target: 'a4',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a5',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a4',\r\n    //   target: 'a1',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a6',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '24',\r\n    //   source: 'a1',\r\n    //   target: 'a7',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n  ],\r\n  nodes: [\r\n    // {\r\n    //   id: 'start1',\r\n    //   title: 'Start (0)',\r\n    //   type: SPECIAL_TYPE,\r\n    // },\r\n    // {\r\n    //   id: 'a1',\r\n    //   title: 'Node A (1)',\r\n    //   type: SPECIAL_TYPE,\r\n    //   x: 258.3976135253906,\r\n    //   y: 331.9783248901367,\r\n    // },\r\n    // {\r\n    //   id: 'a2',\r\n    //   subtype: SPECIAL_CHILD_SUBTYPE,\r\n    //   title: 'Node B (2)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 593.9393920898438,\r\n    //   y: 260.6060791015625,\r\n    // },\r\n    // {\r\n    //   id: 'a3',\r\n    //   title: 'Node C (3)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 237.5757598876953,\r\n    //   y: 61.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a4',\r\n    //   title: 'Node D (4)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 600.5757598876953,\r\n    //   y: 600.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a5',\r\n    //   title: 'Node E (5)',\r\n    //   type: undefined,\r\n    //   x: 50.5757598876953,\r\n    //   y: 500.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a6',\r\n    //   title: 'Node E (6)',\r\n    //   type: SKINNY_TYPE,\r\n    //   x: 300,\r\n    //   y: 600,\r\n    // },\r\n    // {\r\n    //   id: 'a7',\r\n    //   title: 'Node F (7)',\r\n    //   type: POLY_TYPE,\r\n    //   x: 0,\r\n    //   y: 300,\r\n    // },\r\n    // {\r\n    //   id: 'a8',\r\n    //   title: 'Node G (8)',\r\n    //   type: COMPLEX_CIRCLE_TYPE,\r\n    //   x: -200,\r\n    //   y: 400,\r\n    // },\r\n  ],\r\n};\r\n\r\n// function generateSample(totalNodes: any) {\r\n//   const generatedSample: IGraph = {\r\n//     edges: [],\r\n//     nodes: [],\r\n//   };\r\n//   let y = 0;\r\n//   let x = 0;\r\n\r\n//   const numNodes = totalNodes ? totalNodes : 0;\r\n\r\n//   // generate large array of nodes\r\n//   // These loops are fast enough. 1000 nodes = .45ms + .34ms\r\n//   // 2000 nodes = .86ms + .68ms\r\n//   // implying a linear relationship with number of nodes.\r\n//   for (let i = 1; i <= numNodes; i++) {\r\n//     if (i % 20 === 0) {\r\n//       y++;\r\n//       x = 0;\r\n//     } else {\r\n//       x++;\r\n//     }\r\n\r\n//     generatedSample.nodes.push({\r\n//       id: `a${i}`,\r\n//       title: `Node ${i}`,\r\n//       type: nodeTypes[Math.floor(nodeTypes.length * Math.random())],\r\n//       x: 0 + 200 * x,\r\n//       y: 0 + 200 * y,\r\n//     });\r\n//   }\r\n//   // link each node to another node\r\n//   for (let i = 1; i < numNodes; i++) {\r\n//     generatedSample.edges.push({\r\n//       source: `a${i}`,\r\n//       target: `a${i + 1}`,\r\n//       type: edgeTypes[Math.floor(edgeTypes.length * Math.random())],\r\n//     });\r\n//   }\r\n\r\n//   return generatedSample;\r\n// }\r\n\r\n\r\nexport type IGraphProps = {\r\n  graph: IGraph,\r\n  createKnowledgeSpace: (graph: IGraph) => void,\r\n  id: string,\r\n};\r\n\r\nexport type IGraphState = {\r\n  graph: any,\r\n  selected: any,\r\n  totalNodes: number,\r\n  copiedNode: any,\r\n  layoutEngineType?: LayoutEngineType,\r\n};\r\n\r\n\r\nexport class Graph extends React.Component<IGraphProps, IGraphState> {\r\n  GraphView: any;\r\n\r\n  constructor(props: IGraphProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      copiedNode: null,\r\n      graph: props.graph,\r\n      layoutEngineType: 'None',\r\n      selected: null,\r\n      totalNodes: props.graph.nodes.length,\r\n    };\r\n\r\n    this.GraphView = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: IGraphProps) {\r\n    if (prevProps !== this.props) {\r\n      this.setState({\r\n        graph: this.props.graph,\r\n        totalNodes: this.props.graph.nodes.length\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // Helper to find the index of a given node\r\n  getNodeIndex(searchNode: INode | any) {\r\n    return this.state.graph.nodes.findIndex((node: any) => {\r\n      return node[NODE_KEY] === searchNode[NODE_KEY];\r\n    });\r\n  }\r\n\r\n  // Helper to find the index of a given edge\r\n  getEdgeIndex(searchEdge: IEdge) {\r\n    return this.state.graph.edges.findIndex((edge: any) => {\r\n      return (\r\n        edge.source === searchEdge.source && edge.target === searchEdge.target\r\n      );\r\n    });\r\n  }\r\n\r\n  // Given a nodeKey, return the corresponding node\r\n  getViewNode(nodeKey: string) {\r\n    const searchNode = {\r\n      id: ''\r\n    };\r\n\r\n    searchNode[NODE_KEY] = nodeKey;\r\n    const i = this.getNodeIndex(searchNode);\r\n\r\n    return this.state.graph.nodes[i];\r\n  }\r\n\r\n  makeItLarge = () => {\r\n    const graph = this.state.graph;\r\n    //const generatedSample = generateSample(this.state.totalNodes);\r\n\r\n    // graph.nodes = generatedSample.nodes;\r\n    // graph.edges = generatedSample.edges;\r\n    this.setState(this.state);\r\n  };\r\n\r\n  addStartNode = () => {\r\n    const graph = this.state.graph;\r\n\r\n    // using a new array like this creates a new memory reference\r\n    // this will force a re-render\r\n    graph.nodes = [\r\n      {\r\n        id: Date.now(),\r\n        title: 'Node A',\r\n        type: SPECIAL_TYPE,\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      ...this.state.graph.nodes,\r\n    ];\r\n    this.setState({\r\n      graph,\r\n    });\r\n  };\r\n  deleteStartNode = () => {\r\n    const graph = this.state.graph;\r\n\r\n    graph.nodes.splice(0, 1);\r\n    // using a new array like this creates a new memory reference\r\n    // this will force a re-render\r\n    graph.nodes = [...this.state.graph.nodes];\r\n    this.setState({\r\n      graph,\r\n    });\r\n  };\r\n\r\n  handleChange = (event: any) => {\r\n    this.setState(\r\n      {\r\n        totalNodes: parseInt(event.target.value || '0', 10),\r\n      },\r\n      this.makeItLarge\r\n    );\r\n  };\r\n\r\n  /*\r\n   * Handlers/Interaction\r\n   */\r\n\r\n  // Called by 'drag' handler, etc..\r\n  // to sync updates from D3 with the graph\r\n  onUpdateNode = (viewNode: INode) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getNodeIndex(viewNode);\r\n\r\n    graph.nodes[i] = viewNode;\r\n    this.setState({ graph });\r\n  };\r\n\r\n  // Node 'mouseUp' handler\r\n  onSelectNode = (viewNode: INode | null) => {\r\n    // Deselect events will send Null viewNode\r\n    this.setState({ selected: viewNode });\r\n  };\r\n\r\n  // Edge 'mouseUp' handler\r\n  onSelectEdge = (viewEdge: IEdge) => {\r\n    this.setState({ selected: viewEdge });\r\n  };\r\n\r\n  // Updates the graph with a new node\r\n  onCreateNode = (x: number, y: number) => {\r\n    const graph = this.state.graph;\r\n\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine node type\r\n    // There is also support for subtypes. (see 'sample' above)\r\n    // The subtype geometry will underlay the 'type' geometry for a node\r\n    const type = EMPTY_TYPE;\r\n\r\n    const viewNode = {\r\n      id: Date.now(),\r\n      title: '',\r\n      type,\r\n      x,\r\n      y,\r\n    };\r\n\r\n    graph.nodes = [...graph.nodes, viewNode];\r\n    this.setState({ graph });\r\n  };\r\n\r\n  // Deletes a node from the graph\r\n  onDeleteNode = (viewNode: INode, nodeId: string, nodeArr: INode[]) => {\r\n    const graph = this.state.graph;\r\n    // Delete any connected edges\r\n    const newEdges = graph.edges.filter((edge: any, i: any) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n\r\n    graph.nodes = nodeArr;\r\n    graph.edges = newEdges;\r\n\r\n    this.setState({ graph, selected: null });\r\n  };\r\n\r\n  // Creates a new node between two edges\r\n  onCreateEdge = (sourceViewNode: INode, targetViewNode: INode) => {\r\n    const graph = this.state.graph;\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine edge type\r\n    const type =\r\n      sourceViewNode.type === SPECIAL_TYPE\r\n        ? SPECIAL_EDGE_TYPE\r\n        : EMPTY_EDGE_TYPE;\r\n\r\n    const viewEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      type,\r\n    };\r\n\r\n    // Only add the edge when the source node is not the same as the target\r\n    if (viewEdge.source !== viewEdge.target) {\r\n      graph.edges = [...graph.edges, viewEdge];\r\n      this.setState({\r\n        graph,\r\n        selected: viewEdge,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when an edge is reattached to a different target.\r\n  onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    graph.edges[i] = edge;\r\n    // reassign the array reference if you want the graph to re-render a swapped edge\r\n    graph.edges = [...graph.edges];\r\n\r\n    this.setState({\r\n      graph,\r\n      selected: edge,\r\n    });\r\n  };\r\n\r\n  // Called when an edge is deleted\r\n  onDeleteEdge = (viewEdge: IEdge, edges: IEdge[]) => {\r\n    const graph = this.state.graph;\r\n\r\n    graph.edges = edges;\r\n    this.setState({\r\n      graph,\r\n      selected: null,\r\n    });\r\n  };\r\n\r\n  onUndo = () => {\r\n    // Not implemented\r\n    console.warn('Undo is not currently implemented in the example.');\r\n    // Normally any add, remove, or update would record the action in an array.\r\n    // In order to undo it one would simply call the inverse of the action performed. For instance, if someone\r\n    // called onDeleteEdge with (viewEdge, i, edges) then an undelete would be a splicing the original viewEdge\r\n    // into the edges array at position i.\r\n  };\r\n\r\n  onCopySelected = () => {\r\n    if (this.state.selected.source) {\r\n      console.warn('Cannot copy selected edges, try selecting a node instead.');\r\n\r\n      return;\r\n    }\r\n\r\n    const x = this.state.selected.x + 10;\r\n    const y = this.state.selected.y + 10;\r\n\r\n    this.setState({\r\n      copiedNode: { ...this.state.selected, x, y },\r\n    });\r\n  };\r\n\r\n  // Pastes the selected node to mouse position\r\n  onPasteSelected = (node: INode, mousePosition?: { x: number; y: number; }) => {\r\n    const graph = this.state.graph;\r\n\r\n    const newNode = {\r\n      ...node,\r\n      id: Date.now(),\r\n      x: mousePosition ? mousePosition.x : node.x,\r\n      y: mousePosition ? mousePosition.y : node.y,\r\n    };\r\n\r\n    graph.nodes = [...graph.nodes, newNode];\r\n    this.forceUpdate();\r\n  };\r\n\r\n  handleChangeLayoutEngineType = (event: any) => {\r\n    this.setState({\r\n      layoutEngineType: (event.target.value as LayoutEngineType | 'None'),\r\n    });\r\n  };\r\n\r\n  onSelectPanNode = (event: any) => {\r\n    if (this.GraphView) {\r\n      this.GraphView.panToNode(event.target.value, true);\r\n    }\r\n  };\r\n  canCreateEdge = (startNode:  INode | undefined, endNode: INode | undefined) => {\r\n    if(endNode != undefined && startNode != undefined) {\r\n      var array = this.state.graph.edges.filter(function( obj: any ) {\r\n        return obj.source === endNode.id;\r\n      });\r\n      return this.isCycle(array, startNode.id, endNode.id);\r\n    }\r\n    return true;\r\n  }\r\n  isCycle = (array: any, startNodeId: any, endNodeId: any) => {\r\n    var filteredArray2 = array.filter(function( obj: any ) {\r\n      return obj.target === startNodeId;\r\n    });\r\n    if (filteredArray2.length != 0) {\r\n      return false;\r\n    }\r\n    var test = true;\r\n    array.forEach((element: any) => {\r\n      var filteredArray = this.state.graph.edges.filter(function( obj: any ) {\r\n        return obj.source === element.target;\r\n      });\r\n      test = this.isCycle(filteredArray, startNodeId, endNodeId);\r\n      if(test == false) {\r\n        return false;\r\n      }\r\n    });\r\n    return test;\r\n  }\r\n  createKnowledgeSpace = () => {\r\n    this.props.createKnowledgeSpace(this.state.graph);\r\n  }\r\n  /*\r\n   * Render\r\n   */\r\n\r\n  render() {\r\n    const { nodes, edges } = this.state.graph;\r\n    const selected = this.state.selected;\r\n    const { NodeTypes, NodeSubtypes, EdgeTypes } = GraphConfig;\r\n    return (\r\n      <><div style={{ height: '700px' }}>\r\n        {!this.props.id &&\r\n          <Button onClick={() => this.createKnowledgeSpace()} variant=\"contained\" color=\"primary\" style={{\r\n            backgroundColor: \"#CAD6DF\",\r\n            color: \"#000\",\r\n            marginBottom: \"1em\",\r\n          }}>\r\n            Create Knowledge Space\r\n          </Button>\r\n        }\r\n        {/* <div className=\"graph-header\">\r\n          <button onClick={this.addStartNode}>Add Node</button>\r\n          <button onClick={this.deleteStartNode}>Delete Node</button>\r\n          <input\r\n            className=\"total-nodes\"\r\n            type=\"number\"\r\n            onBlur={this.handleChange}\r\n            placeholder={this.state.totalNodes.toString()}\r\n          />\r\n          <div className=\"layout-engine\">\r\n            <span>Layout Engine:</span>\r\n            <select\r\n              name=\"layout-engine-type\"\r\n              onChange={this.handleChangeLayoutEngineType}\r\n            >\r\n              <option value={undefined}>None</option>\r\n              <option value={'SnapToGrid'}>Snap to Grid</option>\r\n              <option value={'VerticalTree'}>Vertical Tree</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"pan-list\">\r\n            <span>Pan To:</span>\r\n            <select onChange={this.onSelectPanNode}>\r\n              {nodes.map((node: any) => (\r\n                <option key={node[NODE_KEY]} value={node[NODE_KEY]}>\r\n                  {node.title}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div> */}\r\n        <div id=\"graph\" style={{ height: 'calc(100% - 10px)' }}>\r\n          <GraphView\r\n            ref={el => (this.GraphView = el)}\r\n            nodeKey={NODE_KEY}\r\n            nodes={nodes}\r\n            edges={edges}\r\n            selected={selected}\r\n            nodeTypes={NodeTypes}\r\n            nodeSubtypes={NodeSubtypes}\r\n            edgeTypes={EdgeTypes}\r\n            onSelectNode={this.onSelectNode}\r\n            onCreateNode={this.onCreateNode}\r\n            onUpdateNode={this.onUpdateNode}\r\n            onDeleteNode={this.onDeleteNode}\r\n            onSelectEdge={this.onSelectEdge}\r\n            onCreateEdge={this.onCreateEdge}\r\n            onSwapEdge={this.onSwapEdge}\r\n            onDeleteEdge={this.onDeleteEdge}\r\n            onUndo={this.onUndo}\r\n            onCopySelected={this.onCopySelected}\r\n            onPasteSelected={this.onPasteSelected}\r\n            layoutEngineType={this.state.layoutEngineType}\r\n            canCreateEdge={this.canCreateEdge}\r\n            renderNodeText={data => {\r\n              return (\r\n                <foreignObject x='-100' y='-40' width='200' height='60'>\r\n                  <Tooltip title={<h4 style={{}}>{data.title}</h4>} placement='bottom' PopperProps={{\r\n                    popperOptions: {\r\n                      modifiers: {\r\n                        offset: {\r\n                          enabled: true,\r\n                          offset: '-40px, -40px',\r\n                        },\r\n                      },\r\n                    },\r\n                  }} >\r\n                    <div className='node'>\r\n                      <p className='job-title'>{data.title}</p>\r\n                    </div>\r\n                  </Tooltip>\r\n                </foreignObject>\r\n              )\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n",["140","141"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\styles.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\graph-config.js",["142"],"import * as React from 'react';\r\n\r\nexport const NODE_KEY = 'id'; // Key used to identify nodes\r\n\r\n// These keys are arbitrary (but must match the config)\r\n// However, GraphView renders text differently for empty types\r\n// so this has to be passed in if that behavior is desired.\r\nexport const EMPTY_TYPE = 'customEmpty'; // Empty node type\r\nexport const POLY_TYPE = 'poly';\r\nexport const SPECIAL_TYPE = 'special';\r\nexport const SKINNY_TYPE = 'skinny';\r\nexport const SPECIAL_CHILD_SUBTYPE = 'specialChild';\r\nexport const EMPTY_EDGE_TYPE = 'emptyEdge';\r\nexport const SPECIAL_EDGE_TYPE = 'specialEdge';\r\nexport const COMPLEX_CIRCLE_TYPE = 'complexCircle';\r\n\r\nexport const nodeTypes = [EMPTY_TYPE, POLY_TYPE, SPECIAL_TYPE, SKINNY_TYPE];\r\nexport const edgeTypes = [EMPTY_EDGE_TYPE, SPECIAL_EDGE_TYPE];\r\n\r\nconst EmptyNodeShape = (\r\n  <symbol viewBox=\"0 0 200 120\" width=\"200\" height=\"120\" id=\"emptyNode\">\r\n    <rect width=\"200\" height=\"120\" />\r\n  </symbol>\r\n);\r\n\r\nconst CustomEmptyShape = (\r\n  <symbol viewBox=\"0 0 100 100\" id=\"customEmpty\">\r\n    <circle cx=\"50\" cy=\"50\" r=\"45\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialShape = (\r\n  <symbol viewBox=\"-27 0 154 154\" id=\"special\" width=\"154\" height=\"154\">\r\n    <rect transform=\"translate(50) rotate(45)\" width=\"109\" height=\"109\" />\r\n  </symbol>\r\n);\r\n\r\nconst PolyShape = (\r\n  <symbol viewBox=\"0 0 88 72\" id=\"poly\" width=\"88\" height=\"88\">\r\n    <path d=\"M 0 36 18 0 70 0 88 36 70 72 18 72Z\" />\r\n  </symbol>\r\n);\r\n\r\nconst ComplexCircleShape = (\r\n  <symbol viewBox=\"0 0 100 100\" id=\"complexCircle\" width=\"100\" height=\"100\">\r\n    <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"transparent\" stroke=\"transparent\" />\r\n    <circle cx=\"50\" cy=\"50\" r=\"34\" />\r\n    <path\r\n      d=\"M50,0a50,50,0,1,0,50,50A50,50,0,0,0,50,0Zm0,90A40,40,0,1,1,90,50,40,40,0,0,1,50,90Z\"\r\n      data-intersect-ignore=\"true\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nconst SkinnyShape = (\r\n  <symbol viewBox=\"0 0 154 54\" width=\"154\" height=\"54\" id=\"skinny\">\r\n    <rect x=\"0\" y=\"0\" rx=\"2\" ry=\"2\" width=\"154\" height=\"54\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialChildShape = (\r\n  <symbol viewBox=\"0 0 154 154\" id=\"specialChild\">\r\n    <rect\r\n      x=\"2.5\"\r\n      y=\"0\"\r\n      width=\"154\"\r\n      height=\"154\"\r\n      fill=\"rgba(30, 144, 255, 0.12)\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nconst EmptyEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\r\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"specialEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport default {\r\n  EdgeTypes: {\r\n    emptyEdge: {\r\n      shape: EmptyEdgeShape,\r\n      shapeId: '#emptyEdge',\r\n    },\r\n    specialEdge: {\r\n      shape: SpecialEdgeShape,\r\n      shapeId: '#specialEdge',\r\n    },\r\n  },\r\n  NodeSubtypes: {\r\n    specialChild: {\r\n      shape: SpecialChildShape,\r\n      shapeId: '#specialChild',\r\n    },\r\n  },\r\n  NodeTypes: {\r\n    emptyNode: {\r\n      shape: EmptyNodeShape,\r\n      shapeId: '#emptyNode',\r\n    },\r\n    empty: {\r\n      shape: CustomEmptyShape,\r\n      shapeId: '#empty',\r\n    },\r\n    special: {\r\n      shape: SpecialShape,\r\n      shapeId: '#special',\r\n      typeText: 'Special',\r\n    },\r\n    skinny: {\r\n      shape: SkinnyShape,\r\n      shapeId: '#skinny',\r\n      typeText: 'Skinny',\r\n    },\r\n    poly: {\r\n      shape: PolyShape,\r\n      shapeId: '#poly',\r\n      typeText: 'Poly',\r\n    },\r\n    complexCircle: {\r\n      shape: ComplexCircleShape,\r\n      shapeId: '#complexCircle',\r\n      typeText: '#complexCircle',\r\n    },\r\n  },\r\n};",["143","144"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\styles.ts",[],{"ruleId":"145","severity":1,"message":"146","line":72,"column":16,"nodeType":"147","messageId":"148","endLine":72,"endColumn":23},{"ruleId":"149","severity":1,"message":"150","line":97,"column":24,"nodeType":"151","messageId":"152","endLine":97,"endColumn":26},{"ruleId":"153","severity":1,"message":"154","line":176,"column":6,"nodeType":"155","endLine":176,"endColumn":17,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":22},{"ruleId":"157","severity":1,"message":"159","line":10,"column":3,"nodeType":"147","messageId":"148","endLine":10,"endColumn":14},{"ruleId":"157","severity":1,"message":"160","line":58,"column":11,"nodeType":"147","messageId":"148","endLine":58,"endColumn":17},{"ruleId":"157","severity":1,"message":"161","line":68,"column":31,"nodeType":"147","messageId":"148","endLine":68,"endColumn":39},{"ruleId":"157","severity":1,"message":"162","line":4,"column":3,"nodeType":"147","messageId":"148","endLine":4,"endColumn":8},{"ruleId":"157","severity":1,"message":"163","line":10,"column":17,"nodeType":"147","messageId":"148","endLine":10,"endColumn":28},{"ruleId":"157","severity":1,"message":"160","line":210,"column":11,"nodeType":"147","messageId":"148","endLine":210,"endColumn":17},{"ruleId":"149","severity":1,"message":"150","line":222,"column":172,"nodeType":"151","messageId":"152","endLine":222,"endColumn":174},{"ruleId":"153","severity":1,"message":"164","line":76,"column":6,"nodeType":"155","endLine":76,"endColumn":11,"suggestions":"165"},{"ruleId":"153","severity":1,"message":"166","line":41,"column":6,"nodeType":"155","endLine":41,"endColumn":15,"suggestions":"167"},{"ruleId":"157","severity":1,"message":"168","line":1,"column":10,"nodeType":"147","messageId":"148","endLine":1,"endColumn":15},{"ruleId":"157","severity":1,"message":"169","line":1,"column":17,"nodeType":"147","messageId":"148","endLine":1,"endColumn":29},{"ruleId":"157","severity":1,"message":"168","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":15},{"ruleId":"157","severity":1,"message":"169","line":3,"column":17,"nodeType":"147","messageId":"148","endLine":3,"endColumn":29},{"ruleId":"157","severity":1,"message":"170","line":3,"column":31,"nodeType":"147","messageId":"148","endLine":3,"endColumn":41},{"ruleId":"157","severity":1,"message":"171","line":12,"column":3,"nodeType":"147","messageId":"148","endLine":12,"endColumn":12},{"ruleId":"157","severity":1,"message":"172","line":16,"column":3,"nodeType":"147","messageId":"148","endLine":16,"endColumn":12},{"ruleId":"157","severity":1,"message":"173","line":17,"column":3,"nodeType":"147","messageId":"148","endLine":17,"endColumn":22},{"ruleId":"157","severity":1,"message":"174","line":18,"column":3,"nodeType":"147","messageId":"148","endLine":18,"endColumn":12},{"ruleId":"157","severity":1,"message":"175","line":19,"column":3,"nodeType":"147","messageId":"148","endLine":19,"endColumn":24},{"ruleId":"157","severity":1,"message":"176","line":22,"column":3,"nodeType":"147","messageId":"148","endLine":22,"endColumn":14},{"ruleId":"157","severity":1,"message":"177","line":33,"column":7,"nodeType":"147","messageId":"148","endLine":33,"endColumn":21},{"ruleId":"157","severity":1,"message":"178","line":272,"column":11,"nodeType":"147","messageId":"148","endLine":272,"endColumn":16},{"ruleId":"149","severity":1,"message":"150","line":493,"column":16,"nodeType":"151","messageId":"152","endLine":493,"endColumn":18},{"ruleId":"149","severity":1,"message":"150","line":493,"column":42,"nodeType":"151","messageId":"152","endLine":493,"endColumn":44},{"ruleId":"149","severity":1,"message":"150","line":505,"column":31,"nodeType":"151","messageId":"152","endLine":505,"endColumn":33},{"ruleId":"149","severity":1,"message":"179","line":514,"column":15,"nodeType":"151","messageId":"152","endLine":514,"endColumn":17},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":92,"column":1,"nodeType":"186","endLine":139,"endColumn":3},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},"no-unused-vars","'setAuth' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'test'. Either include it or remove the dependency array. You can also do a functional update 'setTest(t => ...)' if you only need 'test' in the 'setTest' call.","ArrayExpression",["187"],"@typescript-eslint/no-unused-vars","'ExpandMoreIcon' is defined but never used.","'SUBMIT_TEST' is defined but never used.","'result' is assigned a value but never used.","'hasError' is assigned a value but never used.","'IEdge' is defined but never used.","'IGraphProps' is defined but never used.","React Hook useEffect has missing dependencies: 'body' and 'method'. Either include them or remove the dependency array.",["188"],"React Hook useEffect has a missing dependency: 'question'. Either include it or remove the dependency array.",["189"],"'Theme' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'edgeTypes' is defined but never used.","'nodeTypes' is defined but never used.","'COMPLEX_CIRCLE_TYPE' is defined but never used.","'POLY_TYPE' is defined but never used.","'SPECIAL_CHILD_SUBTYPE' is defined but never used.","'SKINNY_TYPE' is defined but never used.","'sample' is assigned a value but never used.","'graph' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-native-reassign",["190"],"no-negated-in-lhs",["191"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [questions, test]",{"range":"198","text":"199"},"Update the dependencies array to be: [body, method, url]",{"range":"200","text":"201"},"Update the dependencies array to be: [answers, question]",{"range":"202","text":"203"},[4844,4855],"[questions, test]",[1688,1693],"[body, method, url]",[1297,1306],"[answers, question]"]