[{"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\index.js":"1","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\reportWebVitals.js":"2","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\App.js":"3","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Login\\Login.js":"4","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListTests\\ListTests.tsx":"5","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\CreateTest.tsx":"6","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Header\\Header.js":"7","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Register\\Register.js":"8","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\TestView.tsx":"9","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx":"10","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx":"11","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\apiUrls.tsx":"12","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\authUtils.tsx":"13","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\hooks\\useFetch.tsx":"14","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx":"15","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\TestAccordion.tsx":"16","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\styles.ts":"17","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\Question.tsx":"18","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts":"19","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts":"20","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts":"21","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\Graph.tsx":"22","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\styles.tsx":"23","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx":"24","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\styles.ts":"25","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\graph-config.js":"26"},{"size":470,"mtime":1606782387856,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1606056955350,"results":"29","hashOfConfig":"28"},{"size":2405,"mtime":1607378417701,"results":"30","hashOfConfig":"28"},{"size":3915,"mtime":1607455613731,"results":"31","hashOfConfig":"28"},{"size":1689,"mtime":1606780575250,"results":"32","hashOfConfig":"28"},{"size":12033,"mtime":1608404207821,"results":"33","hashOfConfig":"28"},{"size":7888,"mtime":1607380258418,"results":"34","hashOfConfig":"28"},{"size":7495,"mtime":1606780575010,"results":"35","hashOfConfig":"28"},{"size":3675,"mtime":1607377996738,"results":"36","hashOfConfig":"28"},{"size":2760,"mtime":1607455619000,"results":"37","hashOfConfig":"28"},{"size":9175,"mtime":1608068853837,"results":"38","hashOfConfig":"28"},{"size":1176,"mtime":1607887630076,"results":"39","hashOfConfig":"28"},{"size":684,"mtime":1606782823492,"results":"40","hashOfConfig":"28"},{"size":1827,"mtime":1606923185700,"results":"41","hashOfConfig":"28"},{"size":4559,"mtime":1607524474537,"results":"42","hashOfConfig":"28"},{"size":1823,"mtime":1606923185670,"results":"43","hashOfConfig":"28"},{"size":755,"mtime":1606923185681,"results":"44","hashOfConfig":"28"},{"size":3506,"mtime":1606860381482,"results":"45","hashOfConfig":"28"},{"size":836,"mtime":1607379095720,"results":"46","hashOfConfig":"28"},{"size":431,"mtime":1607366731120,"results":"47","hashOfConfig":"28"},{"size":1145,"mtime":1607459140379,"results":"48","hashOfConfig":"28"},{"size":16974,"mtime":1608407650082,"results":"49","hashOfConfig":"28"},{"size":573,"mtime":1606778924090,"results":"50","hashOfConfig":"28"},{"size":1924,"mtime":1607269241689,"results":"51","hashOfConfig":"28"},{"size":922,"mtime":1606858805242,"results":"52","hashOfConfig":"28"},{"size":3602,"mtime":1607372652008,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"j9ej0m",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"65"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"65"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\index.js",[],["115","116"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\reportWebVitals.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\App.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Login\\Login.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListTests\\ListTests.tsx",[],["117","118"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\CreateTest.tsx",["119","120"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Header\\Header.js",["121"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n/* import Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup'; */\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport './Header.css'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LocalLibraryIcon from '@material-ui/icons/LocalLibrary';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport PlaylistAdd from '@material-ui/icons/PlaylistAdd';\r\nimport BubbleChart from '@material-ui/icons/BubbleChart';\r\nimport { Link } from 'react-router-dom'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { getUserPermission, getUser, logout } from '../../utils/authUtils';\r\nimport { useHistory } from 'react-router';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  barColor: {\r\n    background: '#64b5f6',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  }\r\n}));\r\n\r\nfunction Header() {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [auth, setAuth] = React.useState(true);\r\n  const [anchorElProfile, setanchorElProfile] = React.useState(null);\r\n  const openProfileMenu = Boolean(anchorElProfile);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    if (getUser()) {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleMenuProfile = (event) => {\r\n    setanchorElProfile(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setanchorElProfile(null);\r\n  };\r\n  const logOut = () => {\r\n    handleClose();\r\n    logout();\r\n    redirect('login');\r\n  };\r\n  const redirect = (path) => {\r\n    handleClose();\r\n    history.push(\"/\" + path);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" classes={{ colorPrimary: classes.barColor }}>\r\n        <Toolbar>\r\n          <ClickAwayListener onClickAway={handleDrawerClose}>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n              onClick={handleDrawerOpen}\r\n              className={clsx(classes.menuButton)}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          </ClickAwayListener>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Examinator\r\n          </Typography>\r\n          {auth && (\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenuProfile}\r\n                edge=\"start\"\r\n                color=\"inherit\"\r\n                className={clsx(classes.menuButton)}\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-links\"\r\n                anchorEl={anchorElProfile}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={openProfileMenu}\r\n                onClose={handleClose}\r\n              >\r\n                {!getUser() &&\r\n                  <div>\r\n                    <MenuItem onClick={() => redirect('login')}>Log in</MenuItem>\r\n                    <MenuItem onClick={() => redirect('register')}>Register</MenuItem>\r\n                  </div>\r\n                }\r\n                {getUser() &&\r\n                  <div>\r\n                    <MenuItem onClick={() => redirect('account')}>My account</MenuItem>\r\n                    <MenuItem onClick={logOut}>Log out</MenuItem>\r\n                  </div>\r\n                }\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {getUser() &&\r\n\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant=\"persistent\"\r\n          anchor=\"left\"\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Examinator\r\n          </Typography>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          {getUserPermission() === 0 &&\r\n            <List>\r\n              {['My tests', 'All tests'].map((text, index) => (\r\n                <ListItem button key={text} component={Link} to={index % 2 === 0 ? '/myTests' : '/student/tests'}>\r\n                  <ListItemIcon>{index % 2 === 0 ? <AssignmentIcon /> : <LocalLibraryIcon />}</ListItemIcon>\r\n                  <ListItemText primary={text} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          }\r\n          <Divider />\r\n          {getUserPermission() === 1 &&\r\n          <>\r\n            <List>\r\n              {['Create test', 'All tests'].map((text, index) => (\r\n                <ListItem button key={text} component={Link} to={index % 2 === 0 ? '/createTest' : '/student/tests'}>\r\n                  <ListItemIcon>{index % 2 === 0 ? <AssignmentIcon /> : <LocalLibraryIcon />}</ListItemIcon>\r\n                  <ListItemText primary={text} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n            {['Create Knowledge Space', 'My Knowledge Spaces'].map((text, index) => (\r\n              <ListItem button key={text} component={Link} to={index % 2 === 0 ? '/knowledge-space' : '/view-knowledge-spaces'}>\r\n                <ListItemIcon>{index % 2 === 0 ? <PlaylistAdd /> : <BubbleChart />}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          </>\r\n          }\r\n          <Divider />\r\n          <List>\r\n            {['Status'].map((text, index) => (\r\n              <ListItem button key={text} >\r\n                <ListItemIcon>{<SchoolIcon />}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Drawer>\r\n\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Register\\Register.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\TestView.tsx",["122","123","124","125"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid, Typography, Button } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nimport QuestionView from './Question/Question'\r\nimport {\r\n  BASE_URL,\r\n  GET_SINGLE_TEST_STUDENT,\r\n  SUBMIT_TEST,\r\n} from '../../utils/apiUrls';\r\nimport { getToken } from '../../utils/authUtils';\r\n\r\nimport { getUser } from '../../utils/authUtils';\r\nimport useFetch from '../../hooks/useFetch';\r\n\r\nimport { useStyles } from './styles'\r\n\r\ninterface ParamTypes {\r\n  testId: string\r\n}\r\n\r\nexport interface TestData {\r\n  testId: string,\r\n  title: string,\r\n  description: string,\r\n  professor: any,\r\n  questions: Array<Question>,\r\n  completed: boolean\r\n}\r\n\r\nexport interface Question {\r\n  questionId: string,\r\n  text: string,\r\n  answers: Array<Answer>,\r\n  selectedAnswers: Array<Answer>\r\n}\r\n\r\nexport interface Answer {\r\n  answerId: string,\r\n  text: string,\r\n  correct: boolean,\r\n}\r\n\r\nconst submit = async (test: TestData) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"post\",\r\n      body: JSON.stringify({test: test}),\r\n    }\r\n    const response = await fetch(BASE_URL + GET_SINGLE_TEST_STUDENT(getUser().id, test.testId), options);\r\n    const result = await response.json();\r\n    return response.ok\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst TestView = () => {\r\n  const classes = useStyles();\r\n  const { testId } = useParams<ParamTypes>();\r\n  const { data, executeFetch, hasError } = useFetch(BASE_URL + GET_SINGLE_TEST_STUDENT(getUser().id, testId), \"get\");\r\n\r\n  const [test, setTest] = useState<TestData>(data?.test);\r\n\r\n  useEffect(() => {\r\n    setTest(data?.test);\r\n  }, [data]);\r\n  console.log(test);\r\n\r\n  const submitTest = async () => {\r\n    const submitedTest = JSON.parse(JSON.stringify(test))\r\n    const success = await submit(submitedTest);\r\n    console.log(success);\r\n    if (success) {\r\n      executeFetch(BASE_URL + GET_SINGLE_TEST_STUDENT(getUser().id, testId), \"get\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            {test?.title}\r\n          </Typography>\r\n          <Typography variant=\"h6\" className={classes.description}>\r\n            {test?.description}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container\r\n          spacing={3}\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          style={{ paddingTop: \"3em\" }} >\r\n\r\n          {test?.questions.map((question: Question) => (\r\n            <Grid item xs={8} key={question.questionId} style={{ paddingTop: \"2em\", paddingBottom: \"2em\" }}>\r\n              <QuestionView\r\n                questionId={question.questionId}\r\n                text={question.text}\r\n                answers={question.answers}\r\n                selectedAnswers={question.selectedAnswers}\r\n                completed={test.completed}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        <Grid container\r\n          spacing={3}\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          style={{ paddingTop: \"6em\", paddingBottom: \"6em\" }} >\r\n          {!test?.completed && <Button onClick={submitTest} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n            Finish test\r\n          </Button>}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestView","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx",["126","127","128","129"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport {\r\n  IEdge,\r\n  INode,\r\n} from 'react-digraph';\r\nimport { Accordion, AccordionSummary, AccordionDetails, AccordionActions, Typography, Button, Grid, InputLabel, FormControl, Input } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nimport { Graph, IGraphProps, IGraph } from '../Graph/Graph'\r\nimport { useStyles } from './styles'\r\nimport {\r\n  BASE_URL,\r\n  CREATE_KNOWLEDGE_SPACE,\r\n  GET_ONE_KNOWLEDGE_SPACE,\r\n  CREATE_REAL,\r\n} from '../../utils/apiUrls';\r\nimport { getToken } from '../../utils/authUtils';\r\nimport { getUser } from '../../utils/authUtils';\r\n\r\nconst submit = async (knowledgeSpace: KnowledgeSpace) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"post\",\r\n      body: JSON.stringify(knowledgeSpace),\r\n    }\r\n    const response = await fetch(BASE_URL + CREATE_KNOWLEDGE_SPACE(getUser().id), options);\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst get = async (id: string) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"get\",\r\n    }\r\n    const response = await fetch(BASE_URL + GET_ONE_KNOWLEDGE_SPACE(getUser().id, id), options);\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst createReal = async (id: string) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"get\",\r\n    }\r\n    const response = await fetch(BASE_URL + CREATE_REAL(getUser().id, id), options);\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\ninterface ParamTypes {\r\n  id: string\r\n}\r\n\r\nconst initialNode: INode = {\r\n  id: Math.floor(Math.random() * 1000),\r\n  title: '',\r\n  x: 258,\r\n  y: 258\r\n}\r\n\r\ninterface KnowledgeSpace {\r\n  title: string,\r\n  problems: Array<any>,\r\n  edges: Array<any>\r\n}\r\n\r\nconst initialKnowledgeSpace: KnowledgeSpace = {\r\n  title: \"\",\r\n  problems: [],\r\n  edges: []\r\n}\r\n\r\nexport const CreateKnowledgeSpace = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { id } = useParams<ParamTypes>();\r\n  const [graph, setGraph] = useState<IGraph>({ nodes: [], edges: [] });\r\n  const [realGraphs, setRealGraphs] = useState<IGraph[]>([]);\r\n\r\n  const [newNode, setNewNode] = useState<INode>(initialNode);\r\n  const [title, setTitle] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetch() {\r\n      const response = await get(id);\r\n      const knowledgeSpace = response.knowledgeSpaces.shift();\r\n      setGraph({\r\n        edges: knowledgeSpace.edges.map((e: any) => {\r\n          return {\r\n            ...e,\r\n            id: e.edgeId,\r\n            source: e.problemSourceId,\r\n            target: e.problemTargetId,\r\n          }\r\n        }),\r\n        nodes: knowledgeSpace.problems.map((p: any) => {\r\n          return {\r\n            ...p,\r\n            id: p.problemId,\r\n          }\r\n        }),\r\n      });\r\n      setTitle(knowledgeSpace.title);\r\n\r\n      let realSpaces = [];\r\n      for (let ks of response.knowledgeSpaces) {\r\n        realSpaces.push(\r\n          {\r\n            edges: ks.edges.map((e: any) => {\r\n              return {\r\n                ...e,\r\n                id: e.edgeId,\r\n                source: e.problemSourceId,\r\n                target: e.problemTargetId,\r\n              }\r\n            }),\r\n            nodes: ks.problems.map((p: any) => {\r\n              return {\r\n                ...p,\r\n                id: p.problemId,\r\n              }\r\n            }),\r\n          }\r\n        );\r\n      }\r\n      setRealGraphs(realSpaces);\r\n    }\r\n    if (id) {\r\n      fetch()\r\n    }\r\n  }, [id]);\r\n\r\n  const createNode = () => {\r\n    const node = { ...newNode };\r\n    const nodes = [...graph.nodes, node];\r\n    setNewNode({ ...initialNode, id: Math.floor(Math.random() * 1000) });\r\n    setGraph({\r\n      ...graph,\r\n      nodes: nodes,\r\n    }\r\n    );\r\n  }\r\n\r\n  const onChangeProblemTitle = (e: any) => {\r\n    setNewNode(prev => {\r\n      return {\r\n        ...prev,\r\n        title: e.target.value\r\n      }\r\n    });\r\n  }\r\n\r\n  const onChangeTitle = (e: any) => {\r\n    setTitle(e.target.value);\r\n  }\r\n\r\n  const createKnowledgeSpace = async (graph: IGraph) => {\r\n    let toSubmit: KnowledgeSpace = { ...initialKnowledgeSpace, title: title }\r\n    toSubmit.edges = graph.edges.map(e => {\r\n      return {\r\n        edgeId: Math.floor(Math.random() * 1000),\r\n        problemSourceId: e.source,\r\n        problemTargetId: e.target\r\n      }\r\n    });\r\n    toSubmit.problems = graph.nodes.map(n => {\r\n      return {\r\n        ...n,\r\n        problemId: n.id,\r\n      }\r\n    });\r\n\r\n    console.log(\"knowledgeSpace\", toSubmit);\r\n    const result = await submit(toSubmit);\r\n    if (result) {\r\n      history.push(`/knowledge-space/${result.id}`)\r\n    }\r\n  }\r\n\r\n  const createRealKs = async () => {\r\n    const result = await createReal(id);\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1} justify={\"center\"} alignItems={\"center\"} style={{ paddingBottom: \"2em\" }}>\r\n        <Grid item xs={6} style={{ textAlign: \"center\", paddingBottom: \"2em\" }}>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            Knowledge Space\r\n          </Typography>\r\n          <FormControl fullWidth>\r\n            <InputLabel htmlFor=\"Text\"> Title </InputLabel>\r\n            <Input name=\"Text\" value={title} onChange={(e) => onChangeTitle(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} disabled={id != undefined} />\r\n          </FormControl>\r\n          <Grid item xs={12} style={{ textAlign: \"center\", paddingTop: \"2em\" }}>\r\n            {!id &&\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography>Add new problem</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                      <FormControl fullWidth>\r\n                        <InputLabel htmlFor=\"Text\"> Title </InputLabel>\r\n                        <Input name=\"Text\" value={newNode.title} onChange={(e) => onChangeProblemTitle(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} />\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n                <AccordionActions>\r\n                  <Button onClick={() => createNode()} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                    Add\r\n                  </Button>\r\n                </AccordionActions>\r\n              </Accordion>\r\n            }\r\n            {(id && realGraphs?.length === 0) &&\r\n              <Button onClick={() => createRealKs()} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                Create real\r\n              </Button>\r\n            }\r\n            {(id && realGraphs?.length !== 0 && realGraphs[0].nodes.length === 0) &&\r\n              <Typography>Calculating real knowledge state</Typography>\r\n            }\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{ textAlign: \"center\" }}>\r\n          <Graph graph={graph} createKnowledgeSpace={createKnowledgeSpace} id={id}></Graph>\r\n        </Grid>\r\n\r\n        {realGraphs?.map((graph: IGraph, index: number) => (\r\n          <Grid item xs={10} key={index} style={{ textAlign: \"center\" }}>\r\n            <Typography>Real Knowledge Space</Typography>\r\n            <Graph graph={graph} createKnowledgeSpace={() => { }} id={id}></Graph>\r\n          </Grid>\r\n        ))}\r\n        {!id &&\r\n          <Grid item xs={7} style={{ textAlign: \"center\", marginTop: \"2.5em\" }}>\r\n            <Typography variant=\"subtitle1\" >\r\n              To add a problem, click on \"Add new problem\", enter title and press \"ADD\".\r\n          </Typography>\r\n            <Typography variant=\"subtitle1\" >\r\n              To add relation, hold shift and click/drag to between problems.\r\n          </Typography>\r\n            <Typography variant=\"subtitle1\" >\r\n              To delete a relation or a problem, click on it and press delete.\r\n          </Typography>\r\n            <Typography variant=\"subtitle1\" >\r\n              Click and drag problems to change their position.\r\n          </Typography>\r\n          </Grid>\r\n        }\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\apiUrls.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\authUtils.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\hooks\\useFetch.tsx",["130"],"import { useEffect, useState } from 'react';\r\nimport { getToken } from '../utils/authUtils';\r\n\r\nconst generateOptions =(\r\n  method: string,\r\n  body: object,\r\n  token: string | null\r\n) => {\r\n  let options = {};\r\n  if (method === \"get\"){\r\n    options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n      },\r\n      method: method,\r\n    }\r\n  } else {\r\n    options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: method,\r\n      body: JSON.stringify(body),\r\n    }\r\n  }\r\n  \r\n  return options;\r\n}\r\n\r\nconst useFetch = (\r\n  url?: string,\r\n  method: string = \"get\",\r\n  body?: any\r\n  ) => {\r\n\r\n  const [data, setData] = useState<any>(null);\r\n  const [hasError, setHasError] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const executeFetch = async (\r\n    url: string,\r\n    method: string = \"get\",\r\n    body?: any\r\n  ) => {\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const token = getToken();\r\n      const options = generateOptions(method, body, token);\r\n\r\n      const response = await fetch(url, options);\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        setData(result);\r\n      } else {\r\n        setHasError(true);\r\n        setErrorMessage(result);\r\n      }\r\n    } catch (error) {\r\n      setHasError(true);\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{\r\n    if(url) {\r\n      executeFetch(url, method, body);\r\n    }\r\n  }, [url]);\r\n\r\n  return {\r\n    data,\r\n    isLoading,\r\n    hasError,\r\n    errorMessage,\r\n    executeFetch,\r\n  };\r\n};\r\n\r\nexport default useFetch;","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx",["131"],"import React, { useState, useEffect } from 'react';\r\nimport { Question, Answer } from '../CreateTest'\r\nimport { useStyles } from './styles'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Grid, Checkbox, FormControl, InputLabel, Input, Button, FormControlLabel, Box, IconButton } from '@material-ui/core';\r\nimport NewAnswer from './NewAnswer/NewAnswer';\r\n\r\n\r\ninterface QuestionProps extends Question {\r\n  index: number,\r\n  setQuestionText: any,\r\n  setQuestionIsMultiple: any,\r\n  setQuestionAnswers: any,\r\n  remove: any\r\n}\r\n\r\nfunction NewQuestion(question: QuestionProps) {\r\n\r\n  const classes = useStyles();\r\n  const [answers, setAnswers] = useState<Array<Answer>>(Array<Answer>());\r\n  const blankAnswer: Answer = {\r\n    Text: '',\r\n    Correct: false\r\n  }\r\n  const onChange = (e: any) => {\r\n    question.setQuestionText(e.target.value, question.index);\r\n  }\r\n  const setIsMultipleChoice = (e: any) => {\r\n    question.setQuestionIsMultiple(e.target.checked, question.index);\r\n  }\r\n\r\n  const removeQuestion = () => {\r\n    console.log(question.index)\r\n    question.remove(question.index);\r\n  }\r\n\r\n  useEffect(() => {\r\n    question?.Answers?.splice(0, question?.Answers?.length);\r\n    question?.Answers?.push(...answers);\r\n    question.setQuestionAnswers(answers, question.index);\r\n  }, [answers]);\r\n\r\n  const setAnswerText = (text: string, index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      {\r\n        ...answers[index],\r\n        Text: text,\r\n      },\r\n      ...answers.slice(index + 1)\r\n    ]);\r\n  }\r\n  const setAnswerIsCorrect = (isCorrect: boolean, index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      {\r\n        ...answers[index],\r\n        Correct: isCorrect,\r\n      },\r\n      ...answers.slice(index + 1)\r\n    ]);\r\n  }\r\n  const removeAnswer = (index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      ...answers.slice(index + 1)]);\r\n  }\r\n\r\n  return <div className={[classes.root, classes.questionPanel].join(' ')}>\r\n    <Box boxShadow={1}>\r\n      <Box boxShadow={1} className={classes.titlePanel} style={{ minWidth: \"38.6em\", maxWidth: \"60em\", margin: \"0.2em 0 0.5em\" }}>\r\n        <Grid container spacing={3} alignItems='center'\r\n          justify='center' >\r\n          <Grid item xs={8} style={{ padding: \"0.5em\" }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"Text\"> Question {question.index + 1} text</InputLabel>\r\n              <Input name=\"Text\" value={question.Text} onChange={(e) => onChange(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={2} style={{ padding: \"0.5em\" }}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={question.isMultipleChoice}\r\n                  onChange={(e) => setIsMultipleChoice(e)}\r\n                  name=\"Correct\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Multiple choice\"\r\n            />\r\n            \r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <IconButton className={classes.button} onClick={() => removeQuestion()}>\r\n              <DeleteIcon />\r\n            </IconButton >\r\n          </Grid>\r\n          <Grid item xs={8} >\r\n            <div className={classes.problemTitle}>Problem: {question?.Problem.title}</div>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Grid container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"stretch\"\r\n        style={{ paddingTop: \"1.5em\" }} >\r\n        <Grid item xs={12}>\r\n          {answers.map((answer: Answer, index: number) => (\r\n            <Grid item xs={11} key={index} style={{ paddingTop: \"1em\", paddingBottom: \"1em\", marginLeft: \"0.5em\", marginRight: \"0.5em\" }}>\r\n              <NewAnswer\r\n                Text={answer.Text}\r\n                Correct={answer.Correct}\r\n                index={index}\r\n                setAnswerText={setAnswerText}\r\n                setAnswerIsCorrect={setAnswerIsCorrect}\r\n                remove={removeAnswer}\r\n              ></NewAnswer>\r\n            </Grid>\r\n          ))}\r\n          <Grid item xs={12}>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={() => setAnswers([...answers, { ...blankAnswer }])} style={{ marginTop: \"0.8em\", marginBottom: \"0.4em\" }}>\r\n              Add an answer\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  </div >;\r\n}\r\n\r\nexport default NewQuestion;\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\TestAccordion.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\Question.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts",["132","133"],"import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: \"2em\",\r\n    marginBottom: \"2em\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    paddingBottom: \"0.5em\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"#CAD6DF\",\r\n    color: \"#000\",\r\n    \"&:hover\":{\r\n      backgroundColor: \"#64B5F6\",\r\n    }\r\n  }\r\n}));\r\n\r\nexport { useStyles };","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\Graph.tsx",["134","135","136","137","138","139","140","141","142","143","144","145","146","147","148"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\styles.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\graph-config.js",["149"],"import * as React from 'react';\r\n\r\nexport const NODE_KEY = 'id'; // Key used to identify nodes\r\n\r\n// These keys are arbitrary (but must match the config)\r\n// However, GraphView renders text differently for empty types\r\n// so this has to be passed in if that behavior is desired.\r\nexport const EMPTY_TYPE = 'customEmpty'; // Empty node type\r\nexport const POLY_TYPE = 'poly';\r\nexport const SPECIAL_TYPE = 'special';\r\nexport const SKINNY_TYPE = 'skinny';\r\nexport const SPECIAL_CHILD_SUBTYPE = 'specialChild';\r\nexport const EMPTY_EDGE_TYPE = 'emptyEdge';\r\nexport const SPECIAL_EDGE_TYPE = 'specialEdge';\r\nexport const COMPLEX_CIRCLE_TYPE = 'complexCircle';\r\n\r\nexport const nodeTypes = [EMPTY_TYPE, POLY_TYPE, SPECIAL_TYPE, SKINNY_TYPE];\r\nexport const edgeTypes = [EMPTY_EDGE_TYPE, SPECIAL_EDGE_TYPE];\r\n\r\nconst EmptyNodeShape = (\r\n  <symbol viewBox=\"0 0 200 120\" width=\"200\" height=\"120\" id=\"emptyNode\">\r\n    <rect width=\"200\" height=\"120\" />\r\n  </symbol>\r\n);\r\n\r\nconst CustomEmptyShape = (\r\n  <symbol viewBox=\"0 0 100 100\" id=\"customEmpty\">\r\n    <circle cx=\"50\" cy=\"50\" r=\"45\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialShape = (\r\n  <symbol viewBox=\"-27 0 154 154\" id=\"special\" width=\"154\" height=\"154\">\r\n    <rect transform=\"translate(50) rotate(45)\" width=\"109\" height=\"109\" />\r\n  </symbol>\r\n);\r\n\r\nconst PolyShape = (\r\n  <symbol viewBox=\"0 0 88 72\" id=\"poly\" width=\"88\" height=\"88\">\r\n    <path d=\"M 0 36 18 0 70 0 88 36 70 72 18 72Z\" />\r\n  </symbol>\r\n);\r\n\r\nconst ComplexCircleShape = (\r\n  <symbol viewBox=\"0 0 100 100\" id=\"complexCircle\" width=\"100\" height=\"100\">\r\n    <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"transparent\" stroke=\"transparent\" />\r\n    <circle cx=\"50\" cy=\"50\" r=\"34\" />\r\n    <path\r\n      d=\"M50,0a50,50,0,1,0,50,50A50,50,0,0,0,50,0Zm0,90A40,40,0,1,1,90,50,40,40,0,0,1,50,90Z\"\r\n      data-intersect-ignore=\"true\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nconst SkinnyShape = (\r\n  <symbol viewBox=\"0 0 154 54\" width=\"154\" height=\"54\" id=\"skinny\">\r\n    <rect x=\"0\" y=\"0\" rx=\"2\" ry=\"2\" width=\"154\" height=\"54\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialChildShape = (\r\n  <symbol viewBox=\"0 0 154 154\" id=\"specialChild\">\r\n    <rect\r\n      x=\"2.5\"\r\n      y=\"0\"\r\n      width=\"154\"\r\n      height=\"154\"\r\n      fill=\"rgba(30, 144, 255, 0.12)\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nconst EmptyEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\r\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"specialEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport default {\r\n  EdgeTypes: {\r\n    emptyEdge: {\r\n      shape: EmptyEdgeShape,\r\n      shapeId: '#emptyEdge',\r\n    },\r\n    specialEdge: {\r\n      shape: SpecialEdgeShape,\r\n      shapeId: '#specialEdge',\r\n    },\r\n  },\r\n  NodeSubtypes: {\r\n    specialChild: {\r\n      shape: SpecialChildShape,\r\n      shapeId: '#specialChild',\r\n    },\r\n  },\r\n  NodeTypes: {\r\n    emptyNode: {\r\n      shape: EmptyNodeShape,\r\n      shapeId: '#emptyNode',\r\n    },\r\n    empty: {\r\n      shape: CustomEmptyShape,\r\n      shapeId: '#empty',\r\n    },\r\n    special: {\r\n      shape: SpecialShape,\r\n      shapeId: '#special',\r\n      typeText: 'Special',\r\n    },\r\n    skinny: {\r\n      shape: SkinnyShape,\r\n      shapeId: '#skinny',\r\n      typeText: 'Skinny',\r\n    },\r\n    poly: {\r\n      shape: PolyShape,\r\n      shapeId: '#poly',\r\n      typeText: 'Poly',\r\n    },\r\n    complexCircle: {\r\n      shape: ComplexCircleShape,\r\n      shapeId: '#complexCircle',\r\n      typeText: '#complexCircle',\r\n    },\r\n  },\r\n};",{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":97,"column":24,"nodeType":"156","messageId":"157","endLine":97,"endColumn":26},{"ruleId":"158","severity":1,"message":"159","line":176,"column":6,"nodeType":"160","endLine":176,"endColumn":17,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":72,"column":16,"nodeType":"164","messageId":"165","endLine":72,"endColumn":23},{"ruleId":"166","severity":1,"message":"167","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":22},{"ruleId":"166","severity":1,"message":"168","line":10,"column":3,"nodeType":"164","messageId":"165","endLine":10,"endColumn":14},{"ruleId":"166","severity":1,"message":"169","line":58,"column":11,"nodeType":"164","messageId":"165","endLine":58,"endColumn":17},{"ruleId":"166","severity":1,"message":"170","line":68,"column":31,"nodeType":"164","messageId":"165","endLine":68,"endColumn":39},{"ruleId":"166","severity":1,"message":"171","line":4,"column":3,"nodeType":"164","messageId":"165","endLine":4,"endColumn":8},{"ruleId":"166","severity":1,"message":"172","line":10,"column":17,"nodeType":"164","messageId":"165","endLine":10,"endColumn":28},{"ruleId":"166","severity":1,"message":"169","line":210,"column":11,"nodeType":"164","messageId":"165","endLine":210,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":223,"column":172,"nodeType":"156","messageId":"157","endLine":223,"endColumn":174},{"ruleId":"158","severity":1,"message":"173","line":76,"column":6,"nodeType":"160","endLine":76,"endColumn":11,"suggestions":"174"},{"ruleId":"158","severity":1,"message":"175","line":41,"column":6,"nodeType":"160","endLine":41,"endColumn":15,"suggestions":"176"},{"ruleId":"166","severity":1,"message":"177","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":15},{"ruleId":"166","severity":1,"message":"178","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":29},{"ruleId":"166","severity":1,"message":"177","line":3,"column":10,"nodeType":"164","messageId":"165","endLine":3,"endColumn":15},{"ruleId":"166","severity":1,"message":"178","line":3,"column":17,"nodeType":"164","messageId":"165","endLine":3,"endColumn":29},{"ruleId":"166","severity":1,"message":"179","line":3,"column":31,"nodeType":"164","messageId":"165","endLine":3,"endColumn":41},{"ruleId":"166","severity":1,"message":"180","line":12,"column":3,"nodeType":"164","messageId":"165","endLine":12,"endColumn":12},{"ruleId":"166","severity":1,"message":"181","line":16,"column":3,"nodeType":"164","messageId":"165","endLine":16,"endColumn":12},{"ruleId":"166","severity":1,"message":"182","line":17,"column":3,"nodeType":"164","messageId":"165","endLine":17,"endColumn":22},{"ruleId":"166","severity":1,"message":"183","line":18,"column":3,"nodeType":"164","messageId":"165","endLine":18,"endColumn":12},{"ruleId":"166","severity":1,"message":"184","line":19,"column":3,"nodeType":"164","messageId":"165","endLine":19,"endColumn":24},{"ruleId":"166","severity":1,"message":"185","line":22,"column":3,"nodeType":"164","messageId":"165","endLine":22,"endColumn":14},{"ruleId":"166","severity":1,"message":"186","line":33,"column":7,"nodeType":"164","messageId":"165","endLine":33,"endColumn":21},{"ruleId":"166","severity":1,"message":"187","line":272,"column":11,"nodeType":"164","messageId":"165","endLine":272,"endColumn":16},{"ruleId":"154","severity":1,"message":"155","line":493,"column":16,"nodeType":"156","messageId":"157","endLine":493,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":493,"column":42,"nodeType":"156","messageId":"157","endLine":493,"endColumn":44},{"ruleId":"154","severity":1,"message":"155","line":505,"column":31,"nodeType":"156","messageId":"157","endLine":505,"endColumn":33},{"ruleId":"154","severity":1,"message":"188","line":514,"column":15,"nodeType":"156","messageId":"157","endLine":514,"endColumn":17},{"ruleId":"189","severity":1,"message":"190","line":92,"column":1,"nodeType":"191","endLine":139,"endColumn":3},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'test'. Either include it or remove the dependency array. You can also do a functional update 'setTest(t => ...)' if you only need 'test' in the 'setTest' call.","ArrayExpression",["194"],"no-unused-vars","'setAuth' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'ExpandMoreIcon' is defined but never used.","'SUBMIT_TEST' is defined but never used.","'result' is assigned a value but never used.","'hasError' is assigned a value but never used.","'IEdge' is defined but never used.","'IGraphProps' is defined but never used.","React Hook useEffect has missing dependencies: 'body' and 'method'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'question'. Either include it or remove the dependency array.",["196"],"'Theme' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'edgeTypes' is defined but never used.","'nodeTypes' is defined but never used.","'COMPLEX_CIRCLE_TYPE' is defined but never used.","'POLY_TYPE' is defined but never used.","'SPECIAL_CHILD_SUBTYPE' is defined but never used.","'SKINNY_TYPE' is defined but never used.","'sample' is assigned a value but never used.","'graph' is assigned a value but never used.","Expected '===' and instead saw '=='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},"Update the dependencies array to be: [questions, test]",{"range":"203","text":"204"},"Update the dependencies array to be: [body, method, url]",{"range":"205","text":"206"},"Update the dependencies array to be: [answers, question]",{"range":"207","text":"208"},[4844,4855],"[questions, test]",[1688,1693],"[body, method, url]",[1297,1306],"[answers, question]"]