[{"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\index.js":"1","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\reportWebVitals.js":"2","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\App.js":"3","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Login\\Login.js":"4","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListTests\\ListTests.tsx":"5","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\CreateTest.tsx":"6","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Header\\Header.js":"7","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Register\\Register.js":"8","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\TestView.tsx":"9","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx":"10","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx":"11","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\apiUrls.tsx":"12","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\authUtils.tsx":"13","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\hooks\\useFetch.tsx":"14","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx":"15","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\TestAccordion.tsx":"16","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\styles.ts":"17","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\Question.tsx":"18","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts":"19","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts":"20","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts":"21","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\Graph.tsx":"22","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\styles.tsx":"23","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx":"24","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\styles.ts":"25","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\graph-config.js":"26","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\GuidedTesting\\GuidedTesting.tsx":"27","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\GuidedTesting\\styles.ts":"28"},{"size":470,"mtime":1606782387856,"results":"29","hashOfConfig":"30"},{"size":375,"mtime":1606056955350,"results":"31","hashOfConfig":"30"},{"size":2661,"mtime":1611164862168,"results":"32","hashOfConfig":"30"},{"size":3907,"mtime":1609274280555,"results":"33","hashOfConfig":"30"},{"size":1991,"mtime":1609274459282,"results":"34","hashOfConfig":"30"},{"size":12038,"mtime":1611183907156,"results":"35","hashOfConfig":"30"},{"size":7872,"mtime":1609274310417,"results":"36","hashOfConfig":"30"},{"size":7495,"mtime":1606780575010,"results":"37","hashOfConfig":"30"},{"size":3653,"mtime":1611171449334,"results":"38","hashOfConfig":"30"},{"size":2765,"mtime":1611184112077,"results":"39","hashOfConfig":"30"},{"size":15461,"mtime":1609279546166,"results":"40","hashOfConfig":"30"},{"size":1359,"mtime":1611184203497,"results":"41","hashOfConfig":"30"},{"size":684,"mtime":1606782823492,"results":"42","hashOfConfig":"30"},{"size":1827,"mtime":1606923185700,"results":"43","hashOfConfig":"30"},{"size":4559,"mtime":1607524474537,"results":"44","hashOfConfig":"30"},{"size":2565,"mtime":1611189053816,"results":"45","hashOfConfig":"30"},{"size":755,"mtime":1606923185681,"results":"46","hashOfConfig":"30"},{"size":3525,"mtime":1611184457652,"results":"47","hashOfConfig":"30"},{"size":836,"mtime":1607379095720,"results":"48","hashOfConfig":"30"},{"size":431,"mtime":1607366731120,"results":"49","hashOfConfig":"30"},{"size":1145,"mtime":1607459140379,"results":"50","hashOfConfig":"30"},{"size":17005,"mtime":1608410598645,"results":"51","hashOfConfig":"30"},{"size":573,"mtime":1606778924090,"results":"52","hashOfConfig":"30"},{"size":1924,"mtime":1607269241689,"results":"53","hashOfConfig":"30"},{"size":922,"mtime":1606858805242,"results":"54","hashOfConfig":"30"},{"size":4406,"mtime":1608409316854,"results":"55","hashOfConfig":"30"},{"size":3813,"mtime":1611188896088,"results":"56","hashOfConfig":"30"},{"size":755,"mtime":1611164542733,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"j9ej0m",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\index.js",[],["125","126"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\reportWebVitals.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\App.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Login\\Login.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListTests\\ListTests.tsx",["127"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Typography,\r\n  Grid,\r\n} from '@material-ui/core';\r\n\r\nimport { \r\n  BASE_URL,\r\n  GET_ALL_TESTS,\r\n} from '../../utils/apiUrls';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport TestAccordion from '../TestAccordion/TestAccordion';\r\nimport { getUserPermission, getUser } from '../../utils/authUtils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: \"2em\",\r\n    marginBottom: \"2em\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  }\r\n}));\r\n\r\n\r\n\r\nconst ListTests = () => {\r\n  const classes = useStyles();\r\n  const [tests, setTests] = useState([]);\r\n  const { data } = useFetch(BASE_URL + GET_ALL_TESTS, \"get\");\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (getUserPermission() === 1) {\r\n        data.tests = data.tests.filter((t: any) => t.professor.professorId == getUser().id)\r\n      }\r\n      setTests(data.tests);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            {getUserPermission() === 1 ? \"My tests\" : \"All tests\"}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container\r\n          spacing={3}\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          style={{ paddingTop: \"3em\" }} >\r\n\r\n          {tests.map((test: any) => (\r\n            <Grid item xs={8} key={test.testId}>\r\n              <TestAccordion\r\n                testId={test.testId}\r\n                title={test.title}\r\n                description={test.description}\r\n                completed={test.completed}\r\n                professor={test.professor.firstName + \" \" + test.professor.lastName}\r\n                ksId={test.knowledgeSpaceId}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListTests;\r\n",["128","129"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\CreateTest.tsx",["130","131"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport NewQuestion from './NewQuestion/NewQuestion';\r\nimport { getUser, getToken } from '../../utils/authUtils';\r\nimport { BASE_URL, CREATE_TEST_PREFIX, CREATE_TEST_POSTFIX } from '../../utils/apiUrls';\r\nimport { useHistory } from 'react-router';\r\nimport { Typography, Grid, FormControl, Divider, Button, Box, Input, InputLabel, MenuItem } from '@material-ui/core';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport { GET_ALL_KNOWLEDGE_SPACES } from '../../utils/apiUrls';\r\nimport Select from '@material-ui/core/Select';\r\nimport { GET_ONE_KNOWLEDGE_SPACE } from '../../utils/apiUrls';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  selectDiv: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 140,\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: \"2em\",\r\n    marginBottom: \"2em\",\r\n  },\r\n  container: {\r\n    border: \"1\"\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  subTitle: {\r\n    flexGrow: 1,\r\n    fontStyle: \"italic\",\r\n    fontSize: \"xx-small\",\r\n  },\r\n  titleTest: {\r\n    textAlign: \"center\"\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 140,\r\n  },\r\n}));\r\nexport interface Question {\r\n  Text: string,\r\n  isMultipleChoice: boolean,\r\n  Answers: Array<Answer>,\r\n  ProblemId: string,\r\n  Problem: any\r\n}\r\nexport interface Answer {\r\n  Text: string,\r\n  Correct: boolean,\r\n}\r\nexport interface Test {\r\n  Title: string,\r\n  Description: string,\r\n  Questions: Array<Question>,\r\n  ProfessorId: string,\r\n  KnowledgeSpaceId: string\r\n}\r\n\r\nfunction CreateTest() {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [knowledgeSpace, setKnowledgeSpace] = useState('');\r\n  const [knowledgeSpaceSelected, setKnowledgeSpaceSelected] = useState<any>({});\r\n  const { data } = useFetch(BASE_URL + GET_ALL_KNOWLEDGE_SPACES(getUser().id), \"get\");\r\n  const [questions, setQuestions] = useState<Array<Question>>(Array<Question>());\r\n  const [problemSelected, setProblemSelected] = useState<any>(\"\");\r\n  const [blankQuestion, setBlankQuestion] = useState<any>({\r\n    Text: '',\r\n    isMultipleChoice: false,\r\n    Answers: Array<Answer>(),\r\n    ProblemId: ''\r\n  });\r\n  const [test, setTest] = useState<Test>({\r\n    Title: '',\r\n    Description: '',\r\n    Questions: Array<Question>(),\r\n    ProfessorId: '',\r\n    KnowledgeSpaceId: '',\r\n  });\r\n\r\n  const onChange = (e: any) => {\r\n    setTest({\r\n      ...test,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n  const handleChange = (e: any) => {\r\n    setKnowledgeSpace(e?.target.value);\r\n    setTest({\r\n      ...test,\r\n      KnowledgeSpaceId: e?.target.value\r\n    });\r\n    console.log(\"Selected KS: \");\r\n    console.log(e?.target.value);\r\n    if(e?.target.value != undefined) {\r\n      fetchKnowledgeSpace(e?.target.value);\r\n    }\r\n    \r\n  }\r\n  const handleProblemSelectedChange = (e: any) => {\r\n    console.log('KS ID:' + test.KnowledgeSpaceId);\r\n    setProblemSelected(e?.target.value);\r\n    setBlankQuestion({\r\n      ...blankQuestion,\r\n      ProblemId: e?.target.value?.problemId,\r\n      Problem: e?.target.value,\r\n    });\r\n\r\n  }\r\n  const fetchData = async (url: string) => {\r\n    try {\r\n      const token = getToken();\r\n      const options = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"get\",\r\n      }\r\n      const response = await fetch(url, options);\r\n      const result = await response.json();\r\n      return result\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n  const fetchKnowledgeSpace = async (ksId: number) => {\r\n    setKnowledgeSpaceSelected(await fetchData(BASE_URL + GET_ONE_KNOWLEDGE_SPACE(getUser().id, ksId)));\r\n  }\r\n  const addQuestion = (e: any) => {\r\n    \r\n    console.log(blankQuestion);\r\n    setQuestions([...questions, { ...blankQuestion }]);\r\n    console.log(\"Current questions:\");\r\n    console.log(questions);\r\n  };\r\n\r\n  const setQuestionText = (text: string, index: number) => {\r\n    setQuestions([\r\n      ...questions.slice(0, index),\r\n      {\r\n        ...questions[index],\r\n        Text: text,\r\n      },\r\n      ...questions.slice(index + 1)\r\n    ]);\r\n  }\r\n  const setQuestionAnswers = (answers: Array<Answer>, index: number) => {\r\n    setQuestions([\r\n      ...questions.slice(0, index),\r\n      {\r\n        ...questions[index],\r\n        Answers: answers,\r\n      },\r\n      ...questions.slice(index + 1)\r\n    ]);\r\n  }\r\n  const setQuestionIsMultiple = (isMultiple: boolean, index: number) => {\r\n    setQuestions([\r\n      ...questions.slice(0, index),\r\n      {\r\n        ...questions[index],\r\n        isMultipleChoice: isMultiple,\r\n      },\r\n      ...questions.slice(index + 1)\r\n    ]);\r\n  }\r\n  useEffect(() => {\r\n    setTest({\r\n      ...test,\r\n      Questions: questions\r\n    });\r\n  }, [questions]);\r\n\r\n  const removeQuestion = (index: number) => {\r\n    console.log(index)\r\n    setQuestions([\r\n      ...questions.slice(0, index),\r\n      ...questions.slice(index + 1)]);\r\n  }\r\n\r\n  const onSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    const token = getToken();\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      body: JSON.stringify({\r\n        Title: test.Title,\r\n        ProfessorId: getUser().id,\r\n        Description: test.Description,\r\n        Questions: questions,\r\n        KnowledgeSpaceId: test.KnowledgeSpaceId\r\n      })\r\n    }\r\n    const url = process.env.NODE_ENV === 'production' ? CREATE_TEST_PREFIX : BASE_URL + CREATE_TEST_PREFIX + getUser().id + CREATE_TEST_POSTFIX;\r\n    fetch(url, requestOptions)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          alert(\"Invalid username or password\")\r\n        }\r\n        else {\r\n          alert(\"Successfuly created test \" + test.Title + \".\");\r\n          history.push(\"/view-knowledge-spaces\");\r\n          return response.json();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n  return <>\r\n    { knowledgeSpace === \"\" &&\r\n      <div>\r\n        <Typography variant=\"h4\" className={classes.title}>\r\n          Choose a knowledge space\r\n      </Typography>\r\n        <div className={classes.selectDiv}>\r\n          <Select\r\n            labelId=\"demo-simple-select-placeholder-label-label\"\r\n            id=\"demo-simple-select-placeholder-label\"\r\n            value={knowledgeSpace}\r\n            onChange={handleChange}\r\n            displayEmpty\r\n            className={classes.selectEmpty}\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>None</em>\r\n            </MenuItem>\r\n            {data?.knowledgeSpaces.map((knowledge_space: any, index: number) => (\r\n              <MenuItem key={index} value={knowledge_space.knowledgeSpaceId}>{knowledge_space.title}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      </div>\r\n\r\n    }\r\n\r\n    { knowledgeSpace !== \"\" &&\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3} alignItems='center' justify='center'>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h4\" className={classes.title}>\r\n              Create a test\r\n            </Typography>\r\n            <Typography variant=\"h5\" className={classes.title}>\r\n              Selected knowledge space: {knowledgeSpaceSelected?.knowledgeSpaces && knowledgeSpaceSelected?.knowledgeSpaces[0].title}\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <form className={classes.title} onSubmit={(e) => onSubmit(e)}  >\r\n            <Grid container\r\n              alignItems='center'\r\n              justify='center'\r\n              spacing={3}\r\n              style={{ paddingTop: \"3em\", marginBottom: \"1em\" }} >\r\n              <Grid item xs={7}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel className={classes.titleTest} htmlFor=\"testTitle\"> Title</InputLabel>\r\n                  <Input className={classes.titleTest} name=\"Title\" value={test.Title} onChange={(e) => onChange(e)} inputProps={{ 'aria-label': 'description', style: { textAlign: 'center' } }} fullWidth={true} required={true} />\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Divider />\r\n\r\n              <Grid item xs={7}>\r\n                <Divider />\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor=\"Description\"> Description</InputLabel>\r\n                  <Input name=\"Description\" rows={4} multiline value={test.Description} onChange={(e) => onChange(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} />\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n\r\n            <Grid container\r\n              alignItems='center'\r\n              justify='center'\r\n              spacing={3}\r\n              style={{ marginTop: \"0.1em\" }}\r\n            >\r\n              <Box justifyContent=\"center\" alignItems='center' border={1} boxShadow={2} style={{ minWidth: \"60em\", maxWidth: \"60em\", background: \"#f0f8ff\" }}>\r\n                <Grid container\r\n                  alignItems='center'\r\n                  justify='center'\r\n                  spacing={3}\r\n                  style={{ paddingTop: \"3em\" }} >\r\n\r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"h5\" className={classes.title}>\r\n                      Questions\r\n                </Typography>\r\n                  </Grid>\r\n\r\n                  {questions.map((question: Question, index: number) => (\r\n                    <Grid item xs={11} key={index} style={{ paddingTop: \"2em\", paddingBottom: \"2em\" }}>\r\n                      <NewQuestion\r\n                        Text={question.Text}\r\n                        isMultipleChoice={question.isMultipleChoice}\r\n                        Answers={question.Answers}\r\n                        ProblemId={question.ProblemId}\r\n                        Problem={question.Problem}\r\n                        index={index}\r\n                        setQuestionText={setQuestionText}\r\n                        setQuestionIsMultiple={setQuestionIsMultiple}\r\n                        setQuestionAnswers={setQuestionAnswers}\r\n                        remove={removeQuestion}\r\n                      />\r\n                    </Grid>\r\n                  ))}\r\n\r\n                  <Grid item xs={12}>\r\n                    {\r\n                       <div className={classes.selectDiv}>\r\n                       <Select\r\n                         labelId=\"demo-simple-select-placeholder-label-label\"\r\n                         id=\"demo-simple-select-placeholder-label\"\r\n                         value={problemSelected}\r\n                         onChange={handleProblemSelectedChange}\r\n                         displayEmpty\r\n                         className={classes.selectEmpty}\r\n                       >\r\n                         <MenuItem value=\"\">\r\n                           <em>None</em>\r\n                         </MenuItem>\r\n                         {knowledgeSpaceSelected?.knowledgeSpaces && knowledgeSpaceSelected?.knowledgeSpaces[0]?.problems.map((problem: any, index: number) => (\r\n                           <MenuItem key={index} value={problem}>{problem.title}</MenuItem>\r\n                         ))}\r\n                       </Select>\r\n                     </div>\r\n                    }\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={(e) => addQuestion(e)} style={{ marginTop: \"0.5em\", marginBottom: \"1em\" }}>\r\n                      Add a question\r\n                  </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </Grid>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginTop: \"2.5em\", marginBottom: \"1em\" }}>\r\n              Submit\r\n        </Button>\r\n          </form>\r\n        </Grid>\r\n      </div>\r\n    }\r\n  </>;\r\n}\r\n\r\nexport default CreateTest;\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Header\\Header.js",["132"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n/* import Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup'; */\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport './Header.css'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LocalLibraryIcon from '@material-ui/icons/LocalLibrary';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport PlaylistAdd from '@material-ui/icons/PlaylistAdd';\r\nimport BubbleChart from '@material-ui/icons/BubbleChart';\r\nimport { Link } from 'react-router-dom'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { getUserPermission, getUser, logout } from '../../utils/authUtils';\r\nimport { useHistory } from 'react-router';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  barColor: {\r\n    background: '#64b5f6',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  }\r\n}));\r\n\r\nfunction Header() {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [auth, setAuth] = React.useState(true);\r\n  const [anchorElProfile, setanchorElProfile] = React.useState(null);\r\n  const openProfileMenu = Boolean(anchorElProfile);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    if (getUser()) {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleMenuProfile = (event) => {\r\n    setanchorElProfile(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setanchorElProfile(null);\r\n  };\r\n  const logOut = () => {\r\n    handleClose();\r\n    logout();\r\n    redirect('login');\r\n  };\r\n  const redirect = (path) => {\r\n    handleClose();\r\n    history.push(\"/\" + path);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" classes={{ colorPrimary: classes.barColor }}>\r\n        <Toolbar>\r\n          <ClickAwayListener onClickAway={handleDrawerClose}>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n              onClick={handleDrawerOpen}\r\n              className={clsx(classes.menuButton)}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          </ClickAwayListener>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Examinator\r\n          </Typography>\r\n          {auth && (\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenuProfile}\r\n                edge=\"start\"\r\n                color=\"inherit\"\r\n                className={clsx(classes.menuButton)}\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-links\"\r\n                anchorEl={anchorElProfile}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={openProfileMenu}\r\n                onClose={handleClose}\r\n              >\r\n                {!getUser() &&\r\n                  <div>\r\n                    <MenuItem onClick={() => redirect('login')}>Log in</MenuItem>\r\n                    <MenuItem onClick={() => redirect('register')}>Register</MenuItem>\r\n                  </div>\r\n                }\r\n                {getUser() &&\r\n                  <div>\r\n                    <MenuItem onClick={() => redirect('account')}>My account</MenuItem>\r\n                    <MenuItem onClick={logOut}>Log out</MenuItem>\r\n                  </div>\r\n                }\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {getUser() &&\r\n\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant=\"persistent\"\r\n          anchor=\"left\"\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Examinator\r\n          </Typography>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          {getUserPermission() === 0 &&\r\n            <List>\r\n              {['My tests', 'All tests'].map((text, index) => (\r\n                <ListItem button key={text} component={Link} to={index % 2 === 0 ? '/myTests' : '/tests'}>\r\n                  <ListItemIcon>{index % 2 === 0 ? <AssignmentIcon /> : <LocalLibraryIcon />}</ListItemIcon>\r\n                  <ListItemText primary={text} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          }\r\n          <Divider />\r\n          {getUserPermission() === 1 &&\r\n          <>\r\n            <List>\r\n              {['Create test', 'All tests'].map((text, index) => (\r\n                <ListItem button key={text} component={Link} to={index % 2 === 0 ? '/createTest' : '/tests'}>\r\n                  <ListItemIcon>{index % 2 === 0 ? <AssignmentIcon /> : <LocalLibraryIcon />}</ListItemIcon>\r\n                  <ListItemText primary={text} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n            {['Create Knowledge Space', 'My Knowledge Spaces'].map((text, index) => (\r\n              <ListItem button key={text} component={Link} to={index % 2 === 0 ? '/knowledge-space' : '/view-knowledge-spaces'}>\r\n                <ListItemIcon>{index % 2 === 0 ? <PlaylistAdd /> : <BubbleChart />}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          </>\r\n          }\r\n          <Divider />\r\n          <List>\r\n            {['Status'].map((text, index) => (\r\n              <ListItem button key={text} >\r\n                <ListItemIcon>{<SchoolIcon />}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Drawer>\r\n\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Register\\Register.js",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\TestView.tsx",["133","134","135","136"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\ListKnowledgeSpaces.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\CreateKnowledgeSpace.tsx",["137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport {\r\n  IEdge,\r\n  INode,\r\n} from 'react-digraph';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Box, AccordionActions, Divider, Typography, Button, Grid, InputLabel, FormControl, Input } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nimport { Graph, IGraphProps, IGraph } from '../Graph/Graph'\r\nimport { useStyles } from './styles'\r\nimport {\r\n  BASE_URL,\r\n  CREATE_KNOWLEDGE_SPACE,\r\n  GET_ONE_KNOWLEDGE_SPACE,\r\n  CREATE_REAL,\r\n} from '../../utils/apiUrls';\r\nimport { getToken } from '../../utils/authUtils';\r\nimport { getUser } from '../../utils/authUtils';\r\nimport GraphConfig, {\r\n  EMPTY_EDGE_TYPE,\r\n  SPECIAL_EDGE_TYPE,\r\n} from '../Graph/graph-config';\r\n\r\nconst submit = async (knowledgeSpace: KnowledgeSpace) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"post\",\r\n      body: JSON.stringify(knowledgeSpace),\r\n    }\r\n    const response = await fetch(BASE_URL + CREATE_KNOWLEDGE_SPACE(getUser().id), options);\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst get = async (id: string) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"get\",\r\n    }\r\n    const response = await fetch(BASE_URL + GET_ONE_KNOWLEDGE_SPACE(getUser().id, id), options);\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst createReal = async (id: string) => {\r\n  try {\r\n    const token = getToken();\r\n    const options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"get\",\r\n    }\r\n    const response = await fetch(BASE_URL + CREATE_REAL(getUser().id, id), options);\r\n    const result = await response.json();\r\n    console.log(result);\r\n    return result;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\ninterface ParamTypes {\r\n  id: string\r\n}\r\n\r\nconst initialNode: INode = {\r\n  id: Math.floor(Math.random() * 10000),\r\n  title: '',\r\n  x: 258,\r\n  y: 258\r\n}\r\n\r\ninterface KnowledgeSpace {\r\n  title: string,\r\n  problems: Array<any>,\r\n  edges: Array<any>\r\n}\r\n\r\nconst initialKnowledgeSpace: KnowledgeSpace = {\r\n  title: \"\",\r\n  problems: [],\r\n  edges: []\r\n}\r\n\r\nexport const CreateKnowledgeSpace = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { id } = useParams<ParamTypes>();\r\n  const [graph, setGraph] = useState<IGraph>({ nodes: [], edges: [] });\r\n  const [realGraphs, setRealGraphs] = useState<IGraph[]>([]);\r\n  const [graphCompare, setGraphCompare] = useState<IGraph>({ nodes: [], edges: [] })\r\n  const [newNode, setNewNode] = useState<INode>(initialNode);\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [levenshteinDistance, setLevenshteinDistance] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    async function fetch() {\r\n      const response = await get(id);\r\n      const knowledgeSpace = response.knowledgeSpaces.shift();\r\n      setGraph({\r\n        edges: knowledgeSpace.edges.map((e: any) => {\r\n          return {\r\n            ...e,\r\n            id: e.edgeId,\r\n            source: e.problemSourceId,\r\n            target: e.problemTargetId,\r\n          }\r\n        }),\r\n        nodes: knowledgeSpace.problems.map((p: any) => {\r\n          return {\r\n            ...p,\r\n            id: p.problemId,\r\n          }\r\n        }),\r\n      });\r\n      setTitle(knowledgeSpace.title);\r\n      let compareSpace: any[] = [];\r\n      \r\n      for (let ks of response.knowledgeSpaces) {\r\n        let nodesMapped: any = ks.problems.map((p: any) => {\r\n          let matchingNode: any = knowledgeSpace.problems.filter((node: any) => p.x == node.x && p.y == node.y);\r\n          return {\r\n            ...matchingNode[0],\r\n            id: matchingNode[0].problemId,\r\n          }\r\n        });\r\n        let edgesMapped = ks.edges.map((e: any) => {\r\n          let problemSource: any = knowledgeSpace.problems.filter((p: any) => {\r\n            return p.x == e.problemSource.x && p.y == e.problemSource.y;\r\n          });\r\n          let problemTarget: any = knowledgeSpace.problems.filter((p: any) => {\r\n            return p.x == e.problemTarget.x && p.y == e.problemTarget.y;\r\n          });\r\n          return {\r\n            ...e,\r\n            id: e.edgeId,\r\n            source: problemSource[0].problemId,\r\n            target: problemTarget[0].problemId,\r\n            type: \"specialEdge\"\r\n          }\r\n        });\r\n        compareSpace.push(\r\n          {\r\n            edges: edgesMapped,\r\n            nodes: nodesMapped\r\n          }\r\n        );\r\n        break;\r\n      }\r\n      if (compareSpace.length) {\r\n        let compareGraphEdgesGood: any = [];\r\n        let compareGraphEdgesBadReal: any = [];\r\n        let compareGraphEdgesBadExpected: any = [];\r\n        compareGraphEdgesGood = compareSpace[0].edges.filter((e: any) => {\r\n          if (knowledgeSpace.edges.filter((edge: any) => {\r\n            return edge.problemSourceId == e.source && edge.problemTargetId == e.target;\r\n          }).length == 0) {\r\n            compareGraphEdgesBadReal.push({\r\n              ...e,\r\n              source: e.source,\r\n              target: e.target,\r\n              type: \"badRealEdge\"\r\n            });\r\n          }\r\n          return knowledgeSpace.edges.filter((edge: any) => {\r\n            return edge.problemSourceId == e.source && edge.problemTargetId == e.target;\r\n          }).length;\r\n        });\r\n        knowledgeSpace.edges.filter((edge: any) => {\r\n          if (compareSpace[0].edges.filter((e: any) => {\r\n            return edge.problemSourceId == e.source && edge.problemTargetId == e.target;\r\n          }).length == 0) {\r\n            compareGraphEdgesBadExpected.push({\r\n              ...edge,\r\n              source: edge.problemSourceId,\r\n              target: edge.problemTargetId,\r\n              type: \"badExpectedEdge\"\r\n            });\r\n          };\r\n          return\r\n        });\r\n        compareSpace[0].edges = compareGraphEdgesGood.concat(compareGraphEdgesBadReal).concat(compareGraphEdgesBadExpected);\r\n        console.log(\"Real space mapped: \");\r\n      console.log(compareSpace[0]);\r\n      setGraphCompare(compareSpace[0]);\r\n      setLevenshteinDistance(compareGraphEdgesBadExpected.length + compareGraphEdgesBadReal.length);\r\n      }\r\n      \r\n      let realSpaces = [];\r\n      for (let ks of response.knowledgeSpaces) {\r\n        realSpaces.push(\r\n          {\r\n            edges: ks.edges.map((e: any) => {\r\n              return {\r\n                ...e,\r\n                id: e.edgeId,\r\n                source: e.problemSourceId,\r\n                target: e.problemTargetId,\r\n              }\r\n            }),\r\n            nodes: ks.problems.map((p: any) => {\r\n              return {\r\n                ...p,\r\n                id: p.problemId,\r\n              }\r\n            }),\r\n          }\r\n        );\r\n      }\r\n      setRealGraphs(realSpaces);\r\n    }\r\n    if (id) {\r\n      fetch()\r\n    }\r\n  }, [id]);\r\n\r\n  const createNode = () => {\r\n    const node = { ...newNode };\r\n    const nodes = [...graph.nodes, node];\r\n    setNewNode({ ...initialNode, id: Math.floor(Math.random() * 1000) });\r\n    setGraph({\r\n      ...graph,\r\n      nodes: nodes,\r\n    }\r\n    );\r\n  }\r\n\r\n  const onChangeProblemTitle = (e: any) => {\r\n    setNewNode(prev => {\r\n      return {\r\n        ...prev,\r\n        title: e.target.value\r\n      }\r\n    });\r\n  }\r\n\r\n  const onChangeTitle = (e: any) => {\r\n    setTitle(e.target.value);\r\n  }\r\n\r\n  const createKnowledgeSpace = async (graph: IGraph) => {\r\n    let toSubmit: KnowledgeSpace = { ...initialKnowledgeSpace, title: title }\r\n    toSubmit.edges = graph.edges.map(e => {\r\n      return {\r\n        edgeId: Math.floor(Math.random() * 1000),\r\n        problemSourceId: e.source,\r\n        problemTargetId: e.target\r\n      }\r\n    });\r\n    toSubmit.problems = graph.nodes.map(n => {\r\n      return {\r\n        ...n,\r\n        problemId: n.id,\r\n      }\r\n    });\r\n\r\n    console.log(\"knowledgeSpace\", toSubmit);\r\n    const result = await submit(toSubmit);\r\n    if (result) {\r\n      history.push(`/knowledge-space/${result.id}`)\r\n    }\r\n  }\r\n\r\n  const createRealKs = async () => {\r\n    const result = await createReal(id);\r\n    window.location.reload();\r\n  }\r\n  let boxHeight = id ? \"690px\" : \"755px\";\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1} justify={\"center\"} alignItems={\"center\"} style={{ paddingBottom: \"2em\" }}>\r\n        <Grid item xs={6} style={{ textAlign: \"center\", paddingBottom: \"2em\" }}>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            Knowledge Space\r\n          </Typography>\r\n          <FormControl fullWidth>\r\n            <InputLabel htmlFor=\"Text\"> Title </InputLabel>\r\n            <Input name=\"Text\" value={title} onChange={(e) => onChangeTitle(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} disabled={id != undefined} />\r\n          </FormControl>\r\n          <Grid item xs={12} style={{ textAlign: \"center\", paddingTop: \"2em\" }}>\r\n            {!id &&\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography>Add new problem</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                      <FormControl fullWidth>\r\n                        <InputLabel htmlFor=\"Text\"> Title </InputLabel>\r\n                        <Input name=\"Text\" value={newNode.title} onChange={(e) => onChangeProblemTitle(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} />\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n                <AccordionActions>\r\n                  <Button onClick={() => createNode()} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                    Add\r\n                  </Button>\r\n                </AccordionActions>\r\n              </Accordion>\r\n            }\r\n            {(id && realGraphs?.length === 0) &&\r\n              <Button onClick={() => createRealKs()} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                Create real\r\n              </Button>\r\n            }\r\n            {(id && realGraphs?.length !== 0 && realGraphs[0].nodes.length === 0) &&\r\n              <Typography>Calculating real knowledge state</Typography>\r\n            }\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{ textAlign: \"center\", marginTop: \"2em\" }}>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            Expected knowledge Space\r\n          </Typography>\r\n          <Box justifyContent=\"center\" alignItems='center' border={1} boxShadow={3} style={{ minWidth: \"80em\", maxWidth: \"100em\", height: boxHeight, background: \"#f0f8ff\" }}>\r\n            <Graph graph={graph} createKnowledgeSpace={createKnowledgeSpace} id={id}></Graph>\r\n          </Box>\r\n        </Grid>\r\n        <Divider />\r\n        {realGraphs?.map((graph: IGraph, index: number) => (\r\n\r\n          <Grid item xs={10} key={index} style={{ textAlign: \"center\", marginTop: \"2em\" }}>\r\n            <Typography variant=\"h4\" className={classes.title}>{index == 0 ? \"Real Knowledge Space\" : \"All posible knowledge states\"}</Typography>\r\n            <Box justifyContent=\"center\" alignItems='center' border={1} boxShadow={3} style={{ minWidth: \"80em\", maxWidth: \"100em\", background: \"#f0f8ff\" }}>\r\n              <Graph graph={graph} createKnowledgeSpace={() => { }} id={id}></Graph>\r\n            </Box>\r\n          </Grid>\r\n        ))}\r\n        <Divider />\r\n        {graphCompare?.nodes?.length != 0 &&\r\n          <Grid item xs={10} key={1} style={{ textAlign: \"center\", marginTop: \"2em\" }}>\r\n            <Typography variant=\"h4\" className={classes.title}>Compared expected vs real knowledge Space</Typography>\r\n            <Box justifyContent=\"center\" alignItems='center' border={1} boxShadow={3} style={{ minWidth: \"80em\", maxWidth: \"100em\", background: \"#f0f8ff\" }}>\r\n              <Graph graph={graphCompare} createKnowledgeSpace={() => { }} id={id}></Graph>\r\n            </Box>\r\n            \r\n            <Typography variant=\"overline\" align=\"left\" style={{ textAlign: \"left\" }}>\r\n              <Grid container spacing={0} >\r\n                <Grid item xs={12} style={{ padding: \"1em\", paddingTop: \"0.4em\" }}>\r\n                  Graph edit distance between expected and real space: <b>{levenshteinDistance}</b>\r\n                </Grid>\r\n              </Grid>\r\n            </Typography>\r\n\r\n            <Typography variant=\"overline\" align=\"left\" style={{ textAlign: \"left\" }}>\r\n              <Grid container spacing={0} >\r\n                <Grid item xs={12} style={{ padding: \"1em\", paddingTop: \"0.4em\" }}>\r\n                  <Box border={1} style={{ maxWidth: \"1em\", maxHeight: \"1em\", minWidth: \"1em\", minHeight: \"1em\", background: \"red\" }}>\r\n                  </Box>These relations have been wrongly expected.\r\n                </Grid>\r\n              </Grid>\r\n            </Typography>\r\n\r\n            <Typography variant=\"overline\" align=\"left\">\r\n            <Grid container spacing={0} >\r\n                <Grid item xs={12} style={{ padding: \"1em\", paddingTop: \"0.4em\" }}>\r\n                  <Box border={1} style={{ maxWidth: \"1em\", maxHeight: \"1em\", minWidth: \"1em\", minHeight: \"1em\", background: \"green\" }}>\r\n                  </Box>These relations have been wrongly expected.\r\n\r\n                </Grid>\r\n              </Grid>\r\n          </Typography>\r\n            <Typography variant=\"overline\" align=\"left\">\r\n            <Grid container spacing={0} >\r\n                <Grid item xs={12} style={{ padding: \"1em\", paddingTop: \"0.4em\" }}>\r\n                  <Box border={1} style={{ maxWidth: \"1em\", maxHeight: \"1em\", minWidth: \"1em\", minHeight: \"1em\", background: \"blue\" }}>\r\n                  </Box>These relations have been wrongly expected.\r\n\r\n                </Grid>\r\n              </Grid>\r\n          </Typography>\r\n          </Grid>\r\n\r\n        }\r\n        <Divider />\r\n        {!id &&\r\n          <Grid item xs={7} style={{ textAlign: \"center\", marginTop: \"2.5em\" }}>\r\n            <Typography variant=\"subtitle1\" >\r\n              To add a problem, click on \"Add new problem\", enter title and press \"ADD\".\r\n          </Typography>\r\n            <Typography variant=\"subtitle1\" >\r\n              To add relation, hold shift and click/drag to between problems.\r\n          </Typography>\r\n            <Typography variant=\"subtitle1\" >\r\n              To delete a relation or a problem, click on it and press delete.\r\n          </Typography>\r\n            <Typography variant=\"subtitle1\" >\r\n              Click and drag problems to change their position.\r\n          </Typography>\r\n          </Grid>\r\n        }\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\apiUrls.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\utils\\authUtils.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\hooks\\useFetch.tsx",["161"],"import { useEffect, useState } from 'react';\r\nimport { getToken } from '../utils/authUtils';\r\n\r\nconst generateOptions =(\r\n  method: string,\r\n  body: object,\r\n  token: string | null\r\n) => {\r\n  let options = {};\r\n  if (method === \"get\"){\r\n    options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n      },\r\n      method: method,\r\n    }\r\n  } else {\r\n    options = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: method,\r\n      body: JSON.stringify(body),\r\n    }\r\n  }\r\n  \r\n  return options;\r\n}\r\n\r\nconst useFetch = (\r\n  url?: string,\r\n  method: string = \"get\",\r\n  body?: any\r\n  ) => {\r\n\r\n  const [data, setData] = useState<any>(null);\r\n  const [hasError, setHasError] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const executeFetch = async (\r\n    url: string,\r\n    method: string = \"get\",\r\n    body?: any\r\n  ) => {\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const token = getToken();\r\n      const options = generateOptions(method, body, token);\r\n\r\n      const response = await fetch(url, options);\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        setData(result);\r\n      } else {\r\n        setHasError(true);\r\n        setErrorMessage(result);\r\n      }\r\n    } catch (error) {\r\n      setHasError(true);\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{\r\n    if(url) {\r\n      executeFetch(url, method, body);\r\n    }\r\n  }, [url]);\r\n\r\n  return {\r\n    data,\r\n    isLoading,\r\n    hasError,\r\n    errorMessage,\r\n    executeFetch,\r\n  };\r\n};\r\n\r\nexport default useFetch;","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewQuestion.tsx",["162"],"import React, { useState, useEffect } from 'react';\r\nimport { Question, Answer } from '../CreateTest'\r\nimport { useStyles } from './styles'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Grid, Checkbox, FormControl, InputLabel, Input, Button, FormControlLabel, Box, IconButton } from '@material-ui/core';\r\nimport NewAnswer from './NewAnswer/NewAnswer';\r\n\r\n\r\ninterface QuestionProps extends Question {\r\n  index: number,\r\n  setQuestionText: any,\r\n  setQuestionIsMultiple: any,\r\n  setQuestionAnswers: any,\r\n  remove: any\r\n}\r\n\r\nfunction NewQuestion(question: QuestionProps) {\r\n\r\n  const classes = useStyles();\r\n  const [answers, setAnswers] = useState<Array<Answer>>(Array<Answer>());\r\n  const blankAnswer: Answer = {\r\n    Text: '',\r\n    Correct: false\r\n  }\r\n  const onChange = (e: any) => {\r\n    question.setQuestionText(e.target.value, question.index);\r\n  }\r\n  const setIsMultipleChoice = (e: any) => {\r\n    question.setQuestionIsMultiple(e.target.checked, question.index);\r\n  }\r\n\r\n  const removeQuestion = () => {\r\n    console.log(question.index)\r\n    question.remove(question.index);\r\n  }\r\n\r\n  useEffect(() => {\r\n    question?.Answers?.splice(0, question?.Answers?.length);\r\n    question?.Answers?.push(...answers);\r\n    question.setQuestionAnswers(answers, question.index);\r\n  }, [answers]);\r\n\r\n  const setAnswerText = (text: string, index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      {\r\n        ...answers[index],\r\n        Text: text,\r\n      },\r\n      ...answers.slice(index + 1)\r\n    ]);\r\n  }\r\n  const setAnswerIsCorrect = (isCorrect: boolean, index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      {\r\n        ...answers[index],\r\n        Correct: isCorrect,\r\n      },\r\n      ...answers.slice(index + 1)\r\n    ]);\r\n  }\r\n  const removeAnswer = (index: number) => {\r\n    setAnswers([\r\n      ...answers.slice(0, index),\r\n      ...answers.slice(index + 1)]);\r\n  }\r\n\r\n  return <div className={[classes.root, classes.questionPanel].join(' ')}>\r\n    <Box boxShadow={1}>\r\n      <Box boxShadow={1} className={classes.titlePanel} style={{ minWidth: \"38.6em\", maxWidth: \"60em\", margin: \"0.2em 0 0.5em\" }}>\r\n        <Grid container spacing={3} alignItems='center'\r\n          justify='center' >\r\n          <Grid item xs={8} style={{ padding: \"0.5em\" }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"Text\"> Question {question.index + 1} text</InputLabel>\r\n              <Input name=\"Text\" value={question.Text} onChange={(e) => onChange(e)} inputProps={{ 'aria-label': 'description' }} fullWidth={true} required={true} />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={2} style={{ padding: \"0.5em\" }}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={question.isMultipleChoice}\r\n                  onChange={(e) => setIsMultipleChoice(e)}\r\n                  name=\"Correct\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Multiple choice\"\r\n            />\r\n            \r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <IconButton className={classes.button} onClick={() => removeQuestion()}>\r\n              <DeleteIcon />\r\n            </IconButton >\r\n          </Grid>\r\n          <Grid item xs={8} >\r\n            <div className={classes.problemTitle}>Problem: {question?.Problem.title}</div>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Grid container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"stretch\"\r\n        style={{ paddingTop: \"1.5em\" }} >\r\n        <Grid item xs={12}>\r\n          {answers.map((answer: Answer, index: number) => (\r\n            <Grid item xs={11} key={index} style={{ paddingTop: \"1em\", paddingBottom: \"1em\", marginLeft: \"0.5em\", marginRight: \"0.5em\" }}>\r\n              <NewAnswer\r\n                Text={answer.Text}\r\n                Correct={answer.Correct}\r\n                index={index}\r\n                setAnswerText={setAnswerText}\r\n                setAnswerIsCorrect={setAnswerIsCorrect}\r\n                remove={removeAnswer}\r\n              ></NewAnswer>\r\n            </Grid>\r\n          ))}\r\n          <Grid item xs={12}>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={() => setAnswers([...answers, { ...blankAnswer }])} style={{ marginTop: \"0.8em\", marginBottom: \"0.4em\" }}>\r\n              Add an answer\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  </div >;\r\n}\r\n\r\nexport default NewQuestion;\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\TestAccordion.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\Question.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\ListKnowledgeSpaces\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateKnowledgeSpace\\styles.ts",["163","164"],"import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: \"2em\",\r\n    marginBottom: \"2em\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    paddingBottom: \"0.5em\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"#CAD6DF\",\r\n    color: \"#000\",\r\n    \"&:hover\":{\r\n      backgroundColor: \"#64B5F6\",\r\n    }\r\n  }\r\n}));\r\n\r\nexport { useStyles };","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\Graph.tsx",["165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"import * as React from 'react';\r\nimport { Tooltip, Button } from '@material-ui/core';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {\r\n  GraphView,\r\n  IEdge,\r\n  INode,\r\n  LayoutEngineType,\r\n} from 'react-digraph';\r\nimport GraphConfig, {\r\n  edgeTypes,\r\n  EMPTY_EDGE_TYPE,\r\n  EMPTY_TYPE,\r\n  NODE_KEY,\r\n  nodeTypes,\r\n  COMPLEX_CIRCLE_TYPE,\r\n  POLY_TYPE,\r\n  SPECIAL_CHILD_SUBTYPE,\r\n  SPECIAL_EDGE_TYPE,\r\n  SPECIAL_TYPE,\r\n  SKINNY_TYPE,\r\n} from './graph-config';\r\n\r\nexport type IGraph = {\r\n  nodes: INode[],\r\n  edges: IEdge[],\r\n};\r\n\r\n// NOTE: Edges must have 'source' & 'target' attributes\r\n// In a more realistic use case, the graph would probably originate\r\n// elsewhere in the App or be generated from some other state upstream of this component.\r\nconst sample: IGraph = {\r\n  edges: [\r\n    // {\r\n    //   handleText: '5',\r\n    //   handleTooltipText: '5',\r\n    //   source: 'start1',\r\n    //   target: 'a1',\r\n    //   type: SPECIAL_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '5',\r\n    //   handleTooltipText: 'This edge connects Node A and Node B',\r\n    //   source: 'a1',\r\n    //   target: 'a2',\r\n    //   type: SPECIAL_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a2',\r\n    //   target: 'a4',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a3',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a3',\r\n    //   target: 'a4',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a5',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a4',\r\n    //   target: 'a1',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '54',\r\n    //   source: 'a1',\r\n    //   target: 'a6',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n    // {\r\n    //   handleText: '24',\r\n    //   source: 'a1',\r\n    //   target: 'a7',\r\n    //   type: EMPTY_EDGE_TYPE,\r\n    // },\r\n  ],\r\n  nodes: [\r\n    // {\r\n    //   id: 'start1',\r\n    //   title: 'Start (0)',\r\n    //   type: SPECIAL_TYPE,\r\n    // },\r\n    // {\r\n    //   id: 'a1',\r\n    //   title: 'Node A (1)',\r\n    //   type: SPECIAL_TYPE,\r\n    //   x: 258.3976135253906,\r\n    //   y: 331.9783248901367,\r\n    // },\r\n    // {\r\n    //   id: 'a2',\r\n    //   subtype: SPECIAL_CHILD_SUBTYPE,\r\n    //   title: 'Node B (2)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 593.9393920898438,\r\n    //   y: 260.6060791015625,\r\n    // },\r\n    // {\r\n    //   id: 'a3',\r\n    //   title: 'Node C (3)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 237.5757598876953,\r\n    //   y: 61.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a4',\r\n    //   title: 'Node D (4)',\r\n    //   type: EMPTY_TYPE,\r\n    //   x: 600.5757598876953,\r\n    //   y: 600.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a5',\r\n    //   title: 'Node E (5)',\r\n    //   type: undefined,\r\n    //   x: 50.5757598876953,\r\n    //   y: 500.81818389892578,\r\n    // },\r\n    // {\r\n    //   id: 'a6',\r\n    //   title: 'Node E (6)',\r\n    //   type: SKINNY_TYPE,\r\n    //   x: 300,\r\n    //   y: 600,\r\n    // },\r\n    // {\r\n    //   id: 'a7',\r\n    //   title: 'Node F (7)',\r\n    //   type: POLY_TYPE,\r\n    //   x: 0,\r\n    //   y: 300,\r\n    // },\r\n    // {\r\n    //   id: 'a8',\r\n    //   title: 'Node G (8)',\r\n    //   type: COMPLEX_CIRCLE_TYPE,\r\n    //   x: -200,\r\n    //   y: 400,\r\n    // },\r\n  ],\r\n};\r\n\r\n// function generateSample(totalNodes: any) {\r\n//   const generatedSample: IGraph = {\r\n//     edges: [],\r\n//     nodes: [],\r\n//   };\r\n//   let y = 0;\r\n//   let x = 0;\r\n\r\n//   const numNodes = totalNodes ? totalNodes : 0;\r\n\r\n//   // generate large array of nodes\r\n//   // These loops are fast enough. 1000 nodes = .45ms + .34ms\r\n//   // 2000 nodes = .86ms + .68ms\r\n//   // implying a linear relationship with number of nodes.\r\n//   for (let i = 1; i <= numNodes; i++) {\r\n//     if (i % 20 === 0) {\r\n//       y++;\r\n//       x = 0;\r\n//     } else {\r\n//       x++;\r\n//     }\r\n\r\n//     generatedSample.nodes.push({\r\n//       id: `a${i}`,\r\n//       title: `Node ${i}`,\r\n//       type: nodeTypes[Math.floor(nodeTypes.length * Math.random())],\r\n//       x: 0 + 200 * x,\r\n//       y: 0 + 200 * y,\r\n//     });\r\n//   }\r\n//   // link each node to another node\r\n//   for (let i = 1; i < numNodes; i++) {\r\n//     generatedSample.edges.push({\r\n//       source: `a${i}`,\r\n//       target: `a${i + 1}`,\r\n//       type: edgeTypes[Math.floor(edgeTypes.length * Math.random())],\r\n//     });\r\n//   }\r\n\r\n//   return generatedSample;\r\n// }\r\n\r\n\r\nexport type IGraphProps = {\r\n  graph: IGraph,\r\n  createKnowledgeSpace: (graph: IGraph) => void,\r\n  id: string,\r\n};\r\n\r\nexport type IGraphState = {\r\n  graph: any,\r\n  selected: any,\r\n  totalNodes: number,\r\n  copiedNode: any,\r\n  layoutEngineType?: LayoutEngineType,\r\n};\r\n\r\n\r\nexport class Graph extends React.Component<IGraphProps, IGraphState> {\r\n  GraphView: any;\r\n\r\n  constructor(props: IGraphProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      copiedNode: null,\r\n      graph: props.graph,\r\n      layoutEngineType: 'None',\r\n      selected: null,\r\n      totalNodes: props.graph.nodes.length,\r\n    };\r\n\r\n    this.GraphView = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: IGraphProps) {\r\n    if (prevProps !== this.props) {\r\n      this.setState({\r\n        graph: this.props.graph,\r\n        totalNodes: this.props.graph.nodes.length\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // Helper to find the index of a given node\r\n  getNodeIndex(searchNode: INode | any) {\r\n    return this.state.graph.nodes.findIndex((node: any) => {\r\n      return node[NODE_KEY] === searchNode[NODE_KEY];\r\n    });\r\n  }\r\n\r\n  // Helper to find the index of a given edge\r\n  getEdgeIndex(searchEdge: IEdge) {\r\n    return this.state.graph.edges.findIndex((edge: any) => {\r\n      return (\r\n        edge.source === searchEdge.source && edge.target === searchEdge.target\r\n      );\r\n    });\r\n  }\r\n\r\n  // Given a nodeKey, return the corresponding node\r\n  getViewNode(nodeKey: string) {\r\n    const searchNode = {\r\n      id: ''\r\n    };\r\n\r\n    searchNode[NODE_KEY] = nodeKey;\r\n    const i = this.getNodeIndex(searchNode);\r\n\r\n    return this.state.graph.nodes[i];\r\n  }\r\n\r\n  makeItLarge = () => {\r\n    const graph = this.state.graph;\r\n    //const generatedSample = generateSample(this.state.totalNodes);\r\n\r\n    // graph.nodes = generatedSample.nodes;\r\n    // graph.edges = generatedSample.edges;\r\n    this.setState(this.state);\r\n  };\r\n\r\n  addStartNode = () => {\r\n    const graph = this.state.graph;\r\n\r\n    // using a new array like this creates a new memory reference\r\n    // this will force a re-render\r\n    graph.nodes = [\r\n      {\r\n        id: Date.now(),\r\n        title: 'Node A',\r\n        type: SPECIAL_TYPE,\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      ...this.state.graph.nodes,\r\n    ];\r\n    this.setState({\r\n      graph,\r\n    });\r\n  };\r\n  deleteStartNode = () => {\r\n    const graph = this.state.graph;\r\n\r\n    graph.nodes.splice(0, 1);\r\n    // using a new array like this creates a new memory reference\r\n    // this will force a re-render\r\n    graph.nodes = [...this.state.graph.nodes];\r\n    this.setState({\r\n      graph,\r\n    });\r\n  };\r\n\r\n  handleChange = (event: any) => {\r\n    this.setState(\r\n      {\r\n        totalNodes: parseInt(event.target.value || '0', 10),\r\n      },\r\n      this.makeItLarge\r\n    );\r\n  };\r\n\r\n  /*\r\n   * Handlers/Interaction\r\n   */\r\n\r\n  // Called by 'drag' handler, etc..\r\n  // to sync updates from D3 with the graph\r\n  onUpdateNode = (viewNode: INode) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getNodeIndex(viewNode);\r\n\r\n    graph.nodes[i] = viewNode;\r\n    this.setState({ graph });\r\n  };\r\n\r\n  // Node 'mouseUp' handler\r\n  onSelectNode = (viewNode: INode | null) => {\r\n    // Deselect events will send Null viewNode\r\n    this.setState({ selected: viewNode });\r\n  };\r\n\r\n  // Edge 'mouseUp' handler\r\n  onSelectEdge = (viewEdge: IEdge) => {\r\n    this.setState({ selected: viewEdge });\r\n  };\r\n\r\n  // Updates the graph with a new node\r\n  onCreateNode = (x: number, y: number) => {\r\n    const graph = this.state.graph;\r\n\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine node type\r\n    // There is also support for subtypes. (see 'sample' above)\r\n    // The subtype geometry will underlay the 'type' geometry for a node\r\n    const type = EMPTY_TYPE;\r\n\r\n    const viewNode = {\r\n      id: Date.now(),\r\n      title: '',\r\n      type,\r\n      x,\r\n      y,\r\n    };\r\n\r\n    graph.nodes = [...graph.nodes, viewNode];\r\n    this.setState({ graph });\r\n  };\r\n\r\n  // Deletes a node from the graph\r\n  onDeleteNode = (viewNode: INode, nodeId: string, nodeArr: INode[]) => {\r\n    const graph = this.state.graph;\r\n    // Delete any connected edges\r\n    const newEdges = graph.edges.filter((edge: any, i: any) => {\r\n      return (\r\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\r\n      );\r\n    });\r\n\r\n    graph.nodes = nodeArr;\r\n    graph.edges = newEdges;\r\n\r\n    this.setState({ graph, selected: null });\r\n  };\r\n\r\n  // Creates a new node between two edges\r\n  onCreateEdge = (sourceViewNode: INode, targetViewNode: INode) => {\r\n    const graph = this.state.graph;\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine edge type\r\n    const type =\r\n      sourceViewNode.type === SPECIAL_TYPE\r\n        ? SPECIAL_EDGE_TYPE\r\n        : EMPTY_EDGE_TYPE;\r\n\r\n    const viewEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      type,\r\n    };\r\n\r\n    // Only add the edge when the source node is not the same as the target\r\n    if (viewEdge.source !== viewEdge.target) {\r\n      graph.edges = [...graph.edges, viewEdge];\r\n      this.setState({\r\n        graph,\r\n        selected: viewEdge,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when an edge is reattached to a different target.\r\n  onSwapEdge = (\r\n    sourceViewNode: INode,\r\n    targetViewNode: INode,\r\n    viewEdge: IEdge\r\n  ) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    graph.edges[i] = edge;\r\n    // reassign the array reference if you want the graph to re-render a swapped edge\r\n    graph.edges = [...graph.edges];\r\n\r\n    this.setState({\r\n      graph,\r\n      selected: edge,\r\n    });\r\n  };\r\n\r\n  // Called when an edge is deleted\r\n  onDeleteEdge = (viewEdge: IEdge, edges: IEdge[]) => {\r\n    const graph = this.state.graph;\r\n\r\n    graph.edges = edges;\r\n    this.setState({\r\n      graph,\r\n      selected: null,\r\n    });\r\n  };\r\n\r\n  onUndo = () => {\r\n    // Not implemented\r\n    console.warn('Undo is not currently implemented in the example.');\r\n    // Normally any add, remove, or update would record the action in an array.\r\n    // In order to undo it one would simply call the inverse of the action performed. For instance, if someone\r\n    // called onDeleteEdge with (viewEdge, i, edges) then an undelete would be a splicing the original viewEdge\r\n    // into the edges array at position i.\r\n  };\r\n\r\n  onCopySelected = () => {\r\n    if (this.state.selected.source) {\r\n      console.warn('Cannot copy selected edges, try selecting a node instead.');\r\n\r\n      return;\r\n    }\r\n\r\n    const x = this.state.selected.x + 10;\r\n    const y = this.state.selected.y + 10;\r\n\r\n    this.setState({\r\n      copiedNode: { ...this.state.selected, x, y },\r\n    });\r\n  };\r\n\r\n  // Pastes the selected node to mouse position\r\n  onPasteSelected = (node: INode, mousePosition?: { x: number; y: number; }) => {\r\n    const graph = this.state.graph;\r\n\r\n    const newNode = {\r\n      ...node,\r\n      id: Date.now(),\r\n      x: mousePosition ? mousePosition.x : node.x,\r\n      y: mousePosition ? mousePosition.y : node.y,\r\n    };\r\n\r\n    graph.nodes = [...graph.nodes, newNode];\r\n    this.forceUpdate();\r\n  };\r\n\r\n  handleChangeLayoutEngineType = (event: any) => {\r\n    this.setState({\r\n      layoutEngineType: (event.target.value as LayoutEngineType | 'None'),\r\n    });\r\n  };\r\n\r\n  onSelectPanNode = (event: any) => {\r\n    if (this.GraphView) {\r\n      this.GraphView.panToNode(event.target.value, true);\r\n    }\r\n  };\r\n  canCreateEdge = (startNode:  INode | undefined, endNode: INode | undefined) => {\r\n    if(endNode != undefined && startNode != undefined) {\r\n      var array = this.state.graph.edges.filter(function( obj: any ) {\r\n        return obj.source === endNode.id;\r\n      });\r\n      return this.isCycle(array, startNode.id, endNode.id);\r\n    }\r\n    return true;\r\n  }\r\n  isCycle = (array: any, startNodeId: any, endNodeId: any) => {\r\n    var filteredArray2 = array.filter(function( obj: any ) {\r\n      return obj.target === startNodeId;\r\n    });\r\n    if (filteredArray2.length != 0) {\r\n      return false;\r\n    }\r\n    var test = true;\r\n    array.forEach((element: any) => {\r\n      var filteredArray = this.state.graph.edges.filter(function( obj: any ) {\r\n        return obj.source === element.target;\r\n      });\r\n      test = this.isCycle(filteredArray, startNodeId, endNodeId);\r\n      if(test == false) {\r\n        return false;\r\n      }\r\n    });\r\n    return test;\r\n  }\r\n  createKnowledgeSpace = () => {\r\n    this.props.createKnowledgeSpace(this.state.graph);\r\n  }\r\n  /*\r\n   * Render\r\n   */\r\n\r\n  render() {\r\n    const { nodes, edges } = this.state.graph;\r\n    const selected = this.state.selected;\r\n    const { NodeTypes, NodeSubtypes, EdgeTypes } = GraphConfig;\r\n    return (\r\n      <><div style={{ height: '700px' }}>\r\n        {!this.props.id &&\r\n          <Button onClick={() => this.createKnowledgeSpace()} variant=\"contained\" color=\"primary\" style={{\r\n            backgroundColor: \"#CAD6DF\",\r\n            color: \"#000\",\r\n            marginBottom: \"1em\",\r\n            marginTop: \"1em\",\r\n          }}>\r\n            Create Knowledge Space\r\n          </Button>\r\n        }\r\n        {/* <div className=\"graph-header\">\r\n          <button onClick={this.addStartNode}>Add Node</button>\r\n          <button onClick={this.deleteStartNode}>Delete Node</button>\r\n          <input\r\n            className=\"total-nodes\"\r\n            type=\"number\"\r\n            onBlur={this.handleChange}\r\n            placeholder={this.state.totalNodes.toString()}\r\n          />\r\n          <div className=\"layout-engine\">\r\n            <span>Layout Engine:</span>\r\n            <select\r\n              name=\"layout-engine-type\"\r\n              onChange={this.handleChangeLayoutEngineType}\r\n            >\r\n              <option value={undefined}>None</option>\r\n              <option value={'SnapToGrid'}>Snap to Grid</option>\r\n              <option value={'VerticalTree'}>Vertical Tree</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"pan-list\">\r\n            <span>Pan To:</span>\r\n            <select onChange={this.onSelectPanNode}>\r\n              {nodes.map((node: any) => (\r\n                <option key={node[NODE_KEY]} value={node[NODE_KEY]}>\r\n                  {node.title}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div> */}\r\n        <div id=\"graph\" style={{ height: 'calc(100% - 10px)' }}>\r\n          <GraphView\r\n            ref={el => (this.GraphView = el)}\r\n            nodeKey={NODE_KEY}\r\n            nodes={nodes}\r\n            edges={edges}\r\n            selected={selected}\r\n            nodeTypes={NodeTypes}\r\n            nodeSubtypes={NodeSubtypes}\r\n            edgeTypes={EdgeTypes}\r\n            onSelectNode={this.onSelectNode}\r\n            onCreateNode={this.onCreateNode}\r\n            onUpdateNode={this.onUpdateNode}\r\n            onDeleteNode={this.onDeleteNode}\r\n            onSelectEdge={this.onSelectEdge}\r\n            onCreateEdge={this.onCreateEdge}\r\n            onSwapEdge={this.onSwapEdge}\r\n            onDeleteEdge={this.onDeleteEdge}\r\n            onUndo={this.onUndo}\r\n            onCopySelected={this.onCopySelected}\r\n            onPasteSelected={this.onPasteSelected}\r\n            layoutEngineType={this.state.layoutEngineType}\r\n            canCreateEdge={this.canCreateEdge}\r\n            renderNodeText={data => {\r\n              return (\r\n                <foreignObject x='-100' y='-40' width='200' height='60'>\r\n                  <Tooltip title={<h4 style={{}}>{data.title}</h4>} placement='bottom' PopperProps={{\r\n                    popperOptions: {\r\n                      modifiers: {\r\n                        offset: {\r\n                          enabled: true,\r\n                          offset: '-40px, -40px',\r\n                        },\r\n                      },\r\n                    },\r\n                  }} >\r\n                    <div className='node'>\r\n                      <p className='job-title'>{data.title}</p>\r\n                    </div>\r\n                  </Tooltip>\r\n                </foreignObject>\r\n              )\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestAccordion\\styles.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\CreateTest\\NewQuestion\\NewAnswer\\NewAnswer.tsx",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\TestView\\Question\\styles.ts",[],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\Graph\\graph-config.js",["180"],"import * as React from 'react';\r\n\r\nexport const NODE_KEY = 'id'; // Key used to identify nodes\r\n\r\n// These keys are arbitrary (but must match the config)\r\n// However, GraphView renders text differently for empty types\r\n// so this has to be passed in if that behavior is desired.\r\nexport const EMPTY_TYPE = 'customEmpty'; // Empty node type\r\nexport const POLY_TYPE = 'poly';\r\nexport const SPECIAL_TYPE = 'special';\r\nexport const SKINNY_TYPE = 'skinny';\r\nexport const SPECIAL_CHILD_SUBTYPE = 'specialChild';\r\nexport const EMPTY_EDGE_TYPE = 'emptyEdge';\r\nexport const SPECIAL_EDGE_TYPE = 'specialEdge';\r\nexport const COMPLEX_CIRCLE_TYPE = 'complexCircle';\r\n\r\nexport const nodeTypes = [EMPTY_TYPE, POLY_TYPE, SPECIAL_TYPE, SKINNY_TYPE];\r\nexport const edgeTypes = [EMPTY_EDGE_TYPE, SPECIAL_EDGE_TYPE];\r\n\r\nconst EmptyNodeShape = (\r\n  <symbol viewBox=\"0 0 200 120\" width=\"200\" height=\"120\" id=\"emptyNode\">\r\n    <rect width=\"200\" height=\"120\" />\r\n  </symbol>\r\n);\r\n\r\nconst CustomEmptyShape = (\r\n  <symbol viewBox=\"0 0 100 100\" id=\"customEmpty\">\r\n    <circle cx=\"50\" cy=\"50\" r=\"45\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialShape = (\r\n  <symbol viewBox=\"-27 0 154 154\" id=\"special\" width=\"154\" height=\"154\">\r\n    <rect transform=\"translate(50) rotate(45)\" width=\"109\" height=\"109\" />\r\n  </symbol>\r\n);\r\n\r\nconst PolyShape = (\r\n  <symbol viewBox=\"0 0 88 72\" id=\"poly\" width=\"88\" height=\"88\">\r\n    <path d=\"M 0 36 18 0 70 0 88 36 70 72 18 72Z\" />\r\n  </symbol>\r\n);\r\n\r\nconst ComplexCircleShape = (\r\n  <symbol viewBox=\"0 0 100 100\" id=\"complexCircle\" width=\"100\" height=\"100\">\r\n    <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"transparent\" stroke=\"transparent\" />\r\n    <circle cx=\"50\" cy=\"50\" r=\"34\" />\r\n    <path\r\n      d=\"M50,0a50,50,0,1,0,50,50A50,50,0,0,0,50,0Zm0,90A40,40,0,1,1,90,50,40,40,0,0,1,50,90Z\"\r\n      data-intersect-ignore=\"true\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nconst SkinnyShape = (\r\n  <symbol viewBox=\"0 0 154 54\" width=\"154\" height=\"54\" id=\"skinny\">\r\n    <rect x=\"0\" y=\"0\" rx=\"2\" ry=\"2\" width=\"154\" height=\"54\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialChildShape = (\r\n  <symbol viewBox=\"0 0 154 154\" id=\"specialChild\">\r\n    <rect\r\n      x=\"2.5\"\r\n      y=\"0\"\r\n      width=\"154\"\r\n      height=\"154\"\r\n      fill=\"rgba(30, 144, 255, 0.12)\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nconst EmptyEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\r\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"specialEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport default {\r\n  EdgeTypes: {\r\n    emptyEdge: {\r\n      shape: EmptyEdgeShape,\r\n      shapeId: '#emptyEdge',\r\n    },\r\n    specialEdge: {\r\n      shape: SpecialEdgeShape,\r\n      shapeId: '#specialEdge',\r\n    },\r\n  },\r\n  NodeSubtypes: {\r\n    specialChild: {\r\n      shape: SpecialChildShape,\r\n      shapeId: '#specialChild',\r\n    },\r\n  },\r\n  NodeTypes: {\r\n    emptyNode: {\r\n      shape: EmptyNodeShape,\r\n      shapeId: '#emptyNode',\r\n    },\r\n    empty: {\r\n      shape: CustomEmptyShape,\r\n      shapeId: '#empty',\r\n    },\r\n    special: {\r\n      shape: SpecialShape,\r\n      shapeId: '#special',\r\n      typeText: 'Special',\r\n    },\r\n    skinny: {\r\n      shape: SkinnyShape,\r\n      shapeId: '#skinny',\r\n      typeText: 'Skinny',\r\n    },\r\n    poly: {\r\n      shape: PolyShape,\r\n      shapeId: '#poly',\r\n      typeText: 'Poly',\r\n    },\r\n    complexCircle: {\r\n      shape: ComplexCircleShape,\r\n      shapeId: '#complexCircle',\r\n      typeText: '#complexCircle',\r\n    },\r\n  },\r\n};","H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\GuidedTesting\\GuidedTesting.tsx",["181","182","183","184","185","186"],"H:\\FTN\\Master\\Savremene_obrazovne_tehnologije_i_standardi\\Projekat\\SOTiS\\frontend\\src\\components\\GuidedTesting\\styles.ts",[],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":37,"column":76,"nodeType":"193","messageId":"194","endLine":37,"endColumn":78},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"195","line":97,"column":24,"nodeType":"193","messageId":"194","endLine":97,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":176,"column":6,"nodeType":"198","endLine":176,"endColumn":17,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":72,"column":16,"nodeType":"202","messageId":"203","endLine":72,"endColumn":23},{"ruleId":"204","severity":1,"message":"205","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":22},{"ruleId":"204","severity":1,"message":"206","line":10,"column":3,"nodeType":"202","messageId":"203","endLine":10,"endColumn":14},{"ruleId":"204","severity":1,"message":"207","line":58,"column":11,"nodeType":"202","messageId":"203","endLine":58,"endColumn":17},{"ruleId":"204","severity":1,"message":"208","line":68,"column":31,"nodeType":"202","messageId":"203","endLine":68,"endColumn":39},{"ruleId":"204","severity":1,"message":"209","line":4,"column":3,"nodeType":"202","messageId":"203","endLine":4,"endColumn":8},{"ruleId":"204","severity":1,"message":"210","line":10,"column":17,"nodeType":"202","messageId":"203","endLine":10,"endColumn":28},{"ruleId":"204","severity":1,"message":"211","line":20,"column":8,"nodeType":"202","messageId":"203","endLine":20,"endColumn":19},{"ruleId":"204","severity":1,"message":"212","line":21,"column":3,"nodeType":"202","messageId":"203","endLine":21,"endColumn":18},{"ruleId":"204","severity":1,"message":"213","line":22,"column":3,"nodeType":"202","messageId":"203","endLine":22,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":143,"column":85,"nodeType":"193","messageId":"194","endLine":143,"endColumn":87},{"ruleId":"191","severity":1,"message":"192","line":143,"column":102,"nodeType":"193","messageId":"194","endLine":143,"endColumn":104},{"ruleId":"191","severity":1,"message":"192","line":151,"column":24,"nodeType":"193","messageId":"194","endLine":151,"endColumn":26},{"ruleId":"191","severity":1,"message":"192","line":151,"column":52,"nodeType":"193","messageId":"194","endLine":151,"endColumn":54},{"ruleId":"191","severity":1,"message":"192","line":154,"column":24,"nodeType":"193","messageId":"194","endLine":154,"endColumn":26},{"ruleId":"191","severity":1,"message":"192","line":154,"column":52,"nodeType":"193","messageId":"194","endLine":154,"endColumn":54},{"ruleId":"191","severity":1,"message":"192","line":178,"column":41,"nodeType":"193","messageId":"194","endLine":178,"endColumn":43},{"ruleId":"191","severity":1,"message":"192","line":178,"column":77,"nodeType":"193","messageId":"194","endLine":178,"endColumn":79},{"ruleId":"191","severity":1,"message":"192","line":179,"column":21,"nodeType":"193","messageId":"194","endLine":179,"endColumn":23},{"ruleId":"191","severity":1,"message":"192","line":188,"column":41,"nodeType":"193","messageId":"194","endLine":188,"endColumn":43},{"ruleId":"191","severity":1,"message":"192","line":188,"column":77,"nodeType":"193","messageId":"194","endLine":188,"endColumn":79},{"ruleId":"191","severity":1,"message":"192","line":193,"column":41,"nodeType":"193","messageId":"194","endLine":193,"endColumn":43},{"ruleId":"191","severity":1,"message":"192","line":193,"column":77,"nodeType":"193","messageId":"194","endLine":193,"endColumn":79},{"ruleId":"191","severity":1,"message":"192","line":194,"column":21,"nodeType":"193","messageId":"194","endLine":194,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":202,"column":11,"nodeType":"216","messageId":"217","endLine":202,"endColumn":17},{"ruleId":"204","severity":1,"message":"207","line":287,"column":11,"nodeType":"202","messageId":"203","endLine":287,"endColumn":17},{"ruleId":"191","severity":1,"message":"195","line":300,"column":172,"nodeType":"193","messageId":"194","endLine":300,"endColumn":174},{"ruleId":"191","severity":1,"message":"192","line":353,"column":71,"nodeType":"193","messageId":"194","endLine":353,"endColumn":73},{"ruleId":"191","severity":1,"message":"195","line":360,"column":38,"nodeType":"193","messageId":"194","endLine":360,"endColumn":40},{"ruleId":"196","severity":1,"message":"218","line":76,"column":6,"nodeType":"198","endLine":76,"endColumn":11,"suggestions":"219"},{"ruleId":"196","severity":1,"message":"220","line":41,"column":6,"nodeType":"198","endLine":41,"endColumn":15,"suggestions":"221"},{"ruleId":"204","severity":1,"message":"222","line":1,"column":10,"nodeType":"202","messageId":"203","endLine":1,"endColumn":15},{"ruleId":"204","severity":1,"message":"223","line":1,"column":17,"nodeType":"202","messageId":"203","endLine":1,"endColumn":29},{"ruleId":"204","severity":1,"message":"222","line":3,"column":10,"nodeType":"202","messageId":"203","endLine":3,"endColumn":15},{"ruleId":"204","severity":1,"message":"223","line":3,"column":17,"nodeType":"202","messageId":"203","endLine":3,"endColumn":29},{"ruleId":"204","severity":1,"message":"224","line":3,"column":31,"nodeType":"202","messageId":"203","endLine":3,"endColumn":41},{"ruleId":"204","severity":1,"message":"225","line":12,"column":3,"nodeType":"202","messageId":"203","endLine":12,"endColumn":12},{"ruleId":"204","severity":1,"message":"226","line":16,"column":3,"nodeType":"202","messageId":"203","endLine":16,"endColumn":12},{"ruleId":"204","severity":1,"message":"227","line":17,"column":3,"nodeType":"202","messageId":"203","endLine":17,"endColumn":22},{"ruleId":"204","severity":1,"message":"228","line":18,"column":3,"nodeType":"202","messageId":"203","endLine":18,"endColumn":12},{"ruleId":"204","severity":1,"message":"229","line":19,"column":3,"nodeType":"202","messageId":"203","endLine":19,"endColumn":24},{"ruleId":"204","severity":1,"message":"230","line":22,"column":3,"nodeType":"202","messageId":"203","endLine":22,"endColumn":14},{"ruleId":"204","severity":1,"message":"231","line":33,"column":7,"nodeType":"202","messageId":"203","endLine":33,"endColumn":21},{"ruleId":"204","severity":1,"message":"232","line":272,"column":11,"nodeType":"202","messageId":"203","endLine":272,"endColumn":16},{"ruleId":"191","severity":1,"message":"195","line":493,"column":16,"nodeType":"193","messageId":"194","endLine":493,"endColumn":18},{"ruleId":"191","severity":1,"message":"195","line":493,"column":42,"nodeType":"193","messageId":"194","endLine":493,"endColumn":44},{"ruleId":"191","severity":1,"message":"195","line":505,"column":31,"nodeType":"193","messageId":"194","endLine":505,"endColumn":33},{"ruleId":"191","severity":1,"message":"192","line":514,"column":15,"nodeType":"193","messageId":"194","endLine":514,"endColumn":17},{"ruleId":"233","severity":1,"message":"234","line":92,"column":1,"nodeType":"235","endLine":139,"endColumn":3},{"ruleId":"204","severity":1,"message":"205","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":22},{"ruleId":"204","severity":1,"message":"206","line":11,"column":3,"nodeType":"202","messageId":"203","endLine":11,"endColumn":14},{"ruleId":"204","severity":1,"message":"236","line":46,"column":7,"nodeType":"202","messageId":"203","endLine":46,"endColumn":13},{"ruleId":"204","severity":1,"message":"207","line":59,"column":11,"nodeType":"202","messageId":"203","endLine":59,"endColumn":17},{"ruleId":"204","severity":1,"message":"208","line":71,"column":31,"nodeType":"202","messageId":"203","endLine":71,"endColumn":39},{"ruleId":"196","severity":1,"message":"237","line":81,"column":6,"nodeType":"198","endLine":81,"endColumn":12,"suggestions":"238"},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'test'. Either include it or remove the dependency array. You can also do a functional update 'setTest(t => ...)' if you only need 'test' in the 'setTest' call.","ArrayExpression",["241"],"no-unused-vars","'setAuth' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'ExpandMoreIcon' is defined but never used.","'SUBMIT_TEST' is defined but never used.","'result' is assigned a value but never used.","'hasError' is assigned a value but never used.","'IEdge' is defined but never used.","'IGraphProps' is defined but never used.","'GraphConfig' is defined but never used.","'EMPTY_EDGE_TYPE' is defined but never used.","'SPECIAL_EDGE_TYPE' is defined but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","React Hook useEffect has missing dependencies: 'body' and 'method'. Either include them or remove the dependency array.",["242"],"React Hook useEffect has a missing dependency: 'question'. Either include it or remove the dependency array.",["243"],"'Theme' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'edgeTypes' is defined but never used.","'nodeTypes' is defined but never used.","'COMPLEX_CIRCLE_TYPE' is defined but never used.","'POLY_TYPE' is defined but never used.","'SPECIAL_CHILD_SUBTYPE' is defined but never used.","'SKINNY_TYPE' is defined but never used.","'sample' is assigned a value but never used.","'graph' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'submit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["244"],"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [questions, test]",{"range":"253","text":"254"},"Update the dependencies array to be: [body, method, url]",{"range":"255","text":"256"},"Update the dependencies array to be: [answers, question]",{"range":"257","text":"258"},"Update the dependencies array to be: [data, history]",{"range":"259","text":"260"},[4844,4855],"[questions, test]",[1688,1693],"[body, method, url]",[1297,1306],"[answers, question]",[2139,2145],"[data, history]"]